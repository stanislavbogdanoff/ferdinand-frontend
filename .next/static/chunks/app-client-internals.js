/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app-client-internals"],{

/***/ "./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5CHP%5CDesktop%5Cferdinand-frontend%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Ccomponents%5Capp-router.js&modules=C%3A%5CUsers%5CHP%5CDesktop%5Cferdinand-frontend%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Ccomponents%5Clayout-router.js&modules=C%3A%5CUsers%5CHP%5CDesktop%5Cferdinand-frontend%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Ccomponents%5Crender-from-template-context.js&server=false!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5CHP%5CDesktop%5Cferdinand-frontend%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Ccomponents%5Capp-router.js&modules=C%3A%5CUsers%5CHP%5CDesktop%5Cferdinand-frontend%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Ccomponents%5Clayout-router.js&modules=C%3A%5CUsers%5CHP%5CDesktop%5Cferdinand-frontend%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Ccomponents%5Crender-from-template-context.js&server=false! ***!

/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/app-router.js */ \"./node_modules/next/dist/client/components/app-router.js\", 23));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/layout-router.js */ \"./node_modules/next/dist/client/components/layout-router.js\", 23));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/render-from-template-context.js */ \"./node_modules/next/dist/client/components/render-from-template-context.js\", 23))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9QyUzQSU1Q1VzZXJzJTVDSFAlNUNEZXNrdG9wJTVDZmVyZGluYW5kLWZyb250ZW5kJTVDbm9kZV9tb2R1bGVzJTVDbmV4dCU1Q2Rpc3QlNUNjbGllbnQlNUNjb21wb25lbnRzJTVDYXBwLXJvdXRlci5qcyZtb2R1bGVzPUMlM0ElNUNVc2VycyU1Q0hQJTVDRGVza3RvcCU1Q2ZlcmRpbmFuZC1mcm9udGVuZCU1Q25vZGVfbW9kdWxlcyU1Q25leHQlNUNkaXN0JTVDY2xpZW50JTVDY29tcG9uZW50cyU1Q2xheW91dC1yb3V0ZXIuanMmbW9kdWxlcz1DJTNBJTVDVXNlcnMlNUNIUCU1Q0Rlc2t0b3AlNUNmZXJkaW5hbmQtZnJvbnRlbmQlNUNub2RlX21vZHVsZXMlNUNuZXh0JTVDZGlzdCU1Q2NsaWVudCU1Q2NvbXBvbmVudHMlNUNyZW5kZXItZnJvbS10ZW1wbGF0ZS1jb250ZXh0LmpzJnNlcnZlcj1mYWxzZSEuanMiLCJtYXBwaW5ncyI6IkFBQUEsNE5BQTRJO0FBQzVJLGtPQUErSTtBQUMvSSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvP2ZiZDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJDOlxcXFxVc2Vyc1xcXFxIUFxcXFxEZXNrdG9wXFxcXGZlcmRpbmFuZC1mcm9udGVuZFxcXFxub2RlX21vZHVsZXNcXFxcbmV4dFxcXFxkaXN0XFxcXGNsaWVudFxcXFxjb21wb25lbnRzXFxcXGFwcC1yb3V0ZXIuanNcIik7XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXEhQXFxcXERlc2t0b3BcXFxcZmVyZGluYW5kLWZyb250ZW5kXFxcXG5vZGVfbW9kdWxlc1xcXFxuZXh0XFxcXGRpc3RcXFxcY2xpZW50XFxcXGNvbXBvbmVudHNcXFxcbGF5b3V0LXJvdXRlci5qc1wiKTtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcSFBcXFxcRGVza3RvcFxcXFxmZXJkaW5hbmQtZnJvbnRlbmRcXFxcbm9kZV9tb2R1bGVzXFxcXG5leHRcXFxcZGlzdFxcXFxjbGllbnRcXFxcY29tcG9uZW50c1xcXFxyZW5kZXItZnJvbS10ZW1wbGF0ZS1jb250ZXh0LmpzXCIpIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5CHP%5CDesktop%5Cferdinand-frontend%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Ccomponents%5Capp-router.js&modules=C%3A%5CUsers%5CHP%5CDesktop%5Cferdinand-frontend%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Ccomponents%5Clayout-router.js&modules=C%3A%5CUsers%5CHP%5CDesktop%5Cferdinand-frontend%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Ccomponents%5Crender-from-template-context.js&server=false!\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/app-router-headers.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/app-router-headers.js ***!
  \************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.FLIGHT_PARAMETERS = exports.RSC_VARY_HEADER = exports.NEXT_ROUTER_PREFETCH = exports.NEXT_ROUTER_STATE_TREE = exports.RSC = void 0;\nvar RSC = 'RSC';\nexports.RSC = RSC;\nvar NEXT_ROUTER_STATE_TREE = 'Next-Router-State-Tree';\nexports.NEXT_ROUTER_STATE_TREE = NEXT_ROUTER_STATE_TREE;\nvar NEXT_ROUTER_PREFETCH = 'Next-Router-Prefetch';\nexports.NEXT_ROUTER_PREFETCH = NEXT_ROUTER_PREFETCH;\nvar RSC_VARY_HEADER = \"\".concat(RSC, \", \").concat(NEXT_ROUTER_STATE_TREE, \", \").concat(NEXT_ROUTER_PREFETCH);\nexports.RSC_VARY_HEADER = RSC_VARY_HEADER;\nvar FLIGHT_PARAMETERS = [[RSC], [NEXT_ROUTER_STATE_TREE], [NEXT_ROUTER_PREFETCH]];\nexports.FLIGHT_PARAMETERS = FLIGHT_PARAMETERS;\n\nif ((typeof exports[\"default\"] === 'function' || typeof exports[\"default\"] === 'object' && exports[\"default\"] !== null) && typeof exports[\"default\"].__esModule === 'undefined') {\n  Object.defineProperty(exports[\"default\"], '__esModule', {\n    value: true\n  });\n  Object.assign(exports[\"default\"], exports);\n  module.exports = exports[\"default\"];\n}\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2FwcC1yb3V0ZXItaGVhZGVycy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQ3pDRyxLQUFLLEVBQUU7QUFEa0MsQ0FBN0M7QUFHQUQseUJBQUEsR0FBNEJBLHVCQUFBLEdBQTBCQSw0QkFBQSxHQUErQkEsOEJBQUEsR0FBaUNBLFdBQUEsR0FBYyxLQUFLLENBQXpJO0FBQ0EsSUFBTU0sR0FBRyxHQUFHLEtBQVo7QUFDQU4sV0FBQSxHQUFjTSxHQUFkO0FBQ0EsSUFBTUQsc0JBQXNCLEdBQUcsd0JBQS9CO0FBQ0FMLDhCQUFBLEdBQWlDSyxzQkFBakM7QUFDQSxJQUFNRCxvQkFBb0IsR0FBRyxzQkFBN0I7QUFDQUosNEJBQUEsR0FBK0JJLG9CQUEvQjtBQUNBLElBQU1ELGVBQWUsYUFBTUcsR0FBTixlQUFjRCxzQkFBZCxlQUF5Q0Qsb0JBQXpDLENBQXJCO0FBQ0FKLHVCQUFBLEdBQTBCRyxlQUExQjtBQUNBLElBQU1ELGlCQUFpQixHQUFHLENBQ3RCLENBQ0lJLEdBREosQ0FEc0IsRUFJdEIsQ0FDSUQsc0JBREosQ0FKc0IsRUFPdEIsQ0FDSUQsb0JBREosQ0FQc0IsQ0FBMUI7QUFXQUoseUJBQUEsR0FBNEJFLGlCQUE1Qjs7QUFFQSxJQUFJLENBQUMsT0FBT0YsT0FBTyxXQUFkLEtBQTJCLFVBQTNCLElBQTBDLE9BQU9BLE9BQU8sV0FBZCxLQUEyQixRQUEzQixJQUF1Q0EsT0FBTyxXQUFQLEtBQW9CLElBQXRHLEtBQWdILE9BQU9BLE9BQU8sV0FBUCxDQUFnQk8sVUFBdkIsS0FBc0MsV0FBMUosRUFBdUs7RUFDcktULE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBTyxXQUE3QixFQUF1QyxZQUF2QyxFQUFxRDtJQUFFQyxLQUFLLEVBQUU7RUFBVCxDQUFyRDtFQUNBSCxNQUFNLENBQUNVLE1BQVAsQ0FBY1IsT0FBTyxXQUFyQixFQUErQkEsT0FBL0I7RUFDQVMsTUFBTSxDQUFDVCxPQUFQLEdBQWlCQSxPQUFPLFdBQXhCO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9hcHAtcm91dGVyLWhlYWRlcnMuanM/MzU2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRkxJR0hUX1BBUkFNRVRFUlMgPSBleHBvcnRzLlJTQ19WQVJZX0hFQURFUiA9IGV4cG9ydHMuTkVYVF9ST1VURVJfUFJFRkVUQ0ggPSBleHBvcnRzLk5FWFRfUk9VVEVSX1NUQVRFX1RSRUUgPSBleHBvcnRzLlJTQyA9IHZvaWQgMDtcbmNvbnN0IFJTQyA9ICdSU0MnO1xuZXhwb3J0cy5SU0MgPSBSU0M7XG5jb25zdCBORVhUX1JPVVRFUl9TVEFURV9UUkVFID0gJ05leHQtUm91dGVyLVN0YXRlLVRyZWUnO1xuZXhwb3J0cy5ORVhUX1JPVVRFUl9TVEFURV9UUkVFID0gTkVYVF9ST1VURVJfU1RBVEVfVFJFRTtcbmNvbnN0IE5FWFRfUk9VVEVSX1BSRUZFVENIID0gJ05leHQtUm91dGVyLVByZWZldGNoJztcbmV4cG9ydHMuTkVYVF9ST1VURVJfUFJFRkVUQ0ggPSBORVhUX1JPVVRFUl9QUkVGRVRDSDtcbmNvbnN0IFJTQ19WQVJZX0hFQURFUiA9IGAke1JTQ30sICR7TkVYVF9ST1VURVJfU1RBVEVfVFJFRX0sICR7TkVYVF9ST1VURVJfUFJFRkVUQ0h9YDtcbmV4cG9ydHMuUlNDX1ZBUllfSEVBREVSID0gUlNDX1ZBUllfSEVBREVSO1xuY29uc3QgRkxJR0hUX1BBUkFNRVRFUlMgPSBbXG4gICAgW1xuICAgICAgICBSU0NcbiAgICBdLFxuICAgIFtcbiAgICAgICAgTkVYVF9ST1VURVJfU1RBVEVfVFJFRVxuICAgIF0sXG4gICAgW1xuICAgICAgICBORVhUX1JPVVRFUl9QUkVGRVRDSFxuICAgIF0sIFxuXTtcbmV4cG9ydHMuRkxJR0hUX1BBUkFNRVRFUlMgPSBGTElHSFRfUEFSQU1FVEVSUztcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlci1oZWFkZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkZMSUdIVF9QQVJBTUVURVJTIiwiUlNDX1ZBUllfSEVBREVSIiwiTkVYVF9ST1VURVJfUFJFRkVUQ0giLCJORVhUX1JPVVRFUl9TVEFURV9UUkVFIiwiUlNDIiwiX19lc01vZHVsZSIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/app-router-headers.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/app-router.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/components/app-router.js ***!
  \****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\"use client\";\n\"use strict\";\n\nvar _slicedToArray = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray.js\");\n\nvar _regeneratorRuntime = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/regenerator/index.js */ \"./node_modules/next/dist/compiled/@babel/runtime/regenerator/index.js\");\n\nvar _defineProperty = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js\");\n\nvar _s = $RefreshSig$();\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = AppRouter;\nexports.fetchServerResponse = fetchServerResponse;\n\nvar _async_to_generator = (__webpack_require__(/*! @swc/helpers/lib/_async_to_generator.js */ \"./node_modules/@swc/helpers/lib/_async_to_generator.js\")[\"default\"]);\n\nvar _interop_require_wildcard = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_wildcard.js */ \"./node_modules/@swc/helpers/lib/_interop_require_wildcard.js\")[\"default\"]);\n\nvar _react = _interop_require_wildcard(__webpack_require__(/*! react */ \"./node_modules/next/dist/compiled/react/index.js\"));\n\nvar _client = __webpack_require__(/*! next/dist/compiled/react-server-dom-webpack/client */ \"./node_modules/next/dist/compiled/react-server-dom-webpack/client.js\");\n\nvar _appRouterContext = __webpack_require__(/*! ../../shared/lib/app-router-context */ \"./node_modules/next/dist/shared/lib/app-router-context.js\");\n\nvar _reducer = __webpack_require__(/*! ./reducer */ \"./node_modules/next/dist/client/components/reducer.js\");\n\nvar _hooksClientContext = __webpack_require__(/*! ../../shared/lib/hooks-client-context */ \"./node_modules/next/dist/shared/lib/hooks-client-context.js\");\n\nvar _useReducerWithDevtools = __webpack_require__(/*! ./use-reducer-with-devtools */ \"./node_modules/next/dist/client/components/use-reducer-with-devtools.js\");\n\nvar _errorBoundary = __webpack_require__(/*! ./error-boundary */ \"./node_modules/next/dist/client/components/error-boundary.js\");\n\nvar _appRouterHeaders = __webpack_require__(/*! ./app-router-headers */ \"./node_modules/next/dist/client/components/app-router-headers.js\");\n\nfunction AppRouter(props) {\n  return /*#__PURE__*/_react[\"default\"].createElement(_errorBoundary.ErrorBoundary, {\n    errorComponent: _errorBoundary.GlobalErrorComponent\n  }, /*#__PURE__*/_react[\"default\"].createElement(Router, Object.assign({}, props)));\n}\n\n_c = AppRouter;\n\nfunction urlToUrlWithoutFlightMarker(url) {\n  var urlWithoutFlightParameters = new URL(url, location.origin); // TODO-APP: handle .rsc for static export case\n\n  return urlWithoutFlightParameters;\n}\n\nvar HotReloader =  false ? 0 : (__webpack_require__(/*! ./react-dev-overlay/hot-reloader-client */ \"./node_modules/next/dist/client/components/react-dev-overlay/hot-reloader-client.js\")[\"default\"]);\n\nfunction fetchServerResponse(url, flightRouterState, prefetch) {\n  return _fetchServerResponse.apply(this, arguments);\n}\n\nfunction _fetchServerResponse() {\n  _fetchServerResponse = _async_to_generator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, flightRouterState, prefetch) {\n    var _headers;\n\n    var headers, res, canonicalUrl, isFlightResponse, flightData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            headers = (_headers = {}, _defineProperty(_headers, _appRouterHeaders.RSC, '1'), _defineProperty(_headers, _appRouterHeaders.NEXT_ROUTER_STATE_TREE, JSON.stringify(flightRouterState)), _headers);\n\n            if (prefetch) {\n              // Enable prefetch response\n              headers[_appRouterHeaders.NEXT_ROUTER_PREFETCH] = '1';\n            }\n\n            _context.next = 4;\n            return fetch(url.toString(), {\n              headers: headers\n            });\n\n          case 4:\n            res = _context.sent;\n            canonicalUrl = res.redirected ? urlToUrlWithoutFlightMarker(res.url) : undefined;\n            isFlightResponse = res.headers.get('content-type') === 'application/octet-stream'; // If fetch returns something different than flight response handle it like a mpa navigation\n\n            if (isFlightResponse) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt(\"return\", [res.url, undefined]);\n\n          case 9:\n            _context.next = 11;\n            return (0, _client).createFromFetch(Promise.resolve(res));\n\n          case 11:\n            flightData = _context.sent;\n            return _context.abrupt(\"return\", [flightData, canonicalUrl]);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchServerResponse.apply(this, arguments);\n} // Ensure the initialParallelRoutes are not combined because of double-rendering in the browser with Strict Mode.\n// TODO-APP: move this back into AppRouter\n\n\nvar initialParallelRoutes =  false ? 0 : new Map();\nvar prefetched = new Set();\n\nfunction findHeadInCache(cache, parallelRoutes) {\n  var isLastItem = Object.keys(parallelRoutes).length === 0;\n\n  if (isLastItem) {\n    return cache.head;\n  }\n\n  for (var key in parallelRoutes) {\n    var _parallelRoutes$key = _slicedToArray(parallelRoutes[key], 2),\n        segment = _parallelRoutes$key[0],\n        childParallelRoutes = _parallelRoutes$key[1];\n\n    var childSegmentMap = cache.parallelRoutes.get(key);\n\n    if (!childSegmentMap) {\n      continue;\n    }\n\n    var cacheKey = Array.isArray(segment) ? segment[1] : segment;\n    var cacheNode = childSegmentMap.get(cacheKey);\n\n    if (!cacheNode) {\n      continue;\n    }\n\n    var item = findHeadInCache(cacheNode, childParallelRoutes);\n\n    if (item) {\n      return item;\n    }\n  }\n\n  return undefined;\n}\n/**\n * The global router that wraps the application components.\n */\n\n\nfunction Router(_ref) {\n  _s();\n\n  var initialHead = _ref.initialHead,\n      initialTree = _ref.initialTree,\n      initialCanonicalUrl = _ref.initialCanonicalUrl,\n      children = _ref.children,\n      assetPrefix = _ref.assetPrefix;\n  var initialState = (0, _react).useMemo(function () {\n    return {\n      tree: initialTree,\n      cache: {\n        status: _appRouterContext.CacheStates.READY,\n        data: null,\n        subTreeData: children,\n        parallelRoutes:  false ? 0 : initialParallelRoutes\n      },\n      prefetchCache: new Map(),\n      pushRef: {\n        pendingPush: false,\n        mpaNavigation: false\n      },\n      focusAndScrollRef: {\n        apply: false\n      },\n      canonicalUrl: // location.href is read as the initial value for canonicalUrl in the browser\n      // This is safe to do as canonicalUrl can't be rendered, it's only used to control the history updates in the useEffect further down in this file.\n       true ? (0, _reducer).createHrefFromUrl(window.location) : 0\n    };\n  }, [children, initialCanonicalUrl, initialTree]);\n\n  var _useReducerWithReduxD = (0, _useReducerWithDevtools).useReducerWithReduxDevtools(_reducer.reducer, initialState),\n      _useReducerWithReduxD2 = _slicedToArray(_useReducerWithReduxD, 3),\n      _useReducerWithReduxD3 = _useReducerWithReduxD2[0],\n      tree = _useReducerWithReduxD3.tree,\n      cache = _useReducerWithReduxD3.cache,\n      prefetchCache = _useReducerWithReduxD3.prefetchCache,\n      pushRef = _useReducerWithReduxD3.pushRef,\n      focusAndScrollRef = _useReducerWithReduxD3.focusAndScrollRef,\n      canonicalUrl = _useReducerWithReduxD3.canonicalUrl,\n      dispatch = _useReducerWithReduxD2[1],\n      sync = _useReducerWithReduxD2[2];\n\n  var head = (0, _react).useMemo(function () {\n    return findHeadInCache(cache, tree[1]);\n  }, [cache, tree]);\n  (0, _react).useEffect(function () {\n    // Ensure initialParallelRoutes is cleaned up from memory once it's used.\n    initialParallelRoutes = null;\n  }, []); // Add memoized pathname/query for useSearchParams and usePathname.\n\n  var _useMemo = (0, _react).useMemo(function () {\n    var url = new URL(canonicalUrl,  false ? 0 : window.location.href);\n    return {\n      // This is turned into a readonly class in `useSearchParams`\n      searchParams: url.searchParams,\n      pathname: url.pathname\n    };\n  }, [canonicalUrl]),\n      searchParams = _useMemo.searchParams,\n      pathname = _useMemo.pathname;\n  /**\n  * Server response that only patches the cache and tree.\n  */\n\n\n  var changeByServerResponse = (0, _react).useCallback(function (previousTree, flightData, overrideCanonicalUrl) {\n    dispatch({\n      type: _reducer.ACTION_SERVER_PATCH,\n      flightData: flightData,\n      previousTree: previousTree,\n      overrideCanonicalUrl: overrideCanonicalUrl,\n      cache: {\n        status: _appRouterContext.CacheStates.LAZY_INITIALIZED,\n        data: null,\n        subTreeData: null,\n        parallelRoutes: new Map()\n      },\n      mutable: {}\n    });\n  }, [dispatch]);\n  /**\n  * The app router that is exposed through `useRouter`. It's only concerned with dispatching actions to the reducer, does not hold state.\n  */\n\n  var appRouter = (0, _react).useMemo(function () {\n    var navigate = function navigate(href, navigateType, forceOptimisticNavigation) {\n      return dispatch({\n        type: _reducer.ACTION_NAVIGATE,\n        url: new URL(href, location.origin),\n        forceOptimisticNavigation: forceOptimisticNavigation,\n        navigateType: navigateType,\n        cache: {\n          status: _appRouterContext.CacheStates.LAZY_INITIALIZED,\n          data: null,\n          subTreeData: null,\n          parallelRoutes: new Map()\n        },\n        mutable: {}\n      });\n    };\n\n    var routerInstance = {\n      back: function back() {\n        return window.history.back();\n      },\n      forward: function forward() {\n        return window.history.forward();\n      },\n      // TODO-APP: implement prefetching of flight\n      prefetch: _async_to_generator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(href) {\n        var url, ref, routerTree, serverResponse;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!prefetched.has(href)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                prefetched.add(href);\n                url = new URL(href, location.origin);\n                _context2.prev = 4;\n                routerTree = ((ref = window.history.state) == null ? void 0 : ref.tree) || initialTree; // TODO-APP: handle case where history.state is not the new router history entry\n\n                _context2.next = 8;\n                return fetchServerResponse(url, // initialTree is used when history.state.tree is missing because the history state is set in `useEffect` below, it being missing means this is the hydration case.\n                routerTree, true);\n\n              case 8:\n                serverResponse = _context2.sent;\n\n                // @ts-ignore startTransition exists\n                _react[\"default\"].startTransition(function () {\n                  dispatch({\n                    type: _reducer.ACTION_PREFETCH,\n                    url: url,\n                    tree: routerTree,\n                    serverResponse: serverResponse\n                  });\n                });\n\n                _context2.next = 15;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](4);\n                console.error('PREFETCH ERROR', _context2.t0);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[4, 12]]);\n      })),\n      replace: function replace(href) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        // @ts-ignore startTransition exists\n        _react[\"default\"].startTransition(function () {\n          navigate(href, 'replace', Boolean(options.forceOptimisticNavigation));\n        });\n      },\n      push: function push(href) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        // @ts-ignore startTransition exists\n        _react[\"default\"].startTransition(function () {\n          navigate(href, 'push', Boolean(options.forceOptimisticNavigation));\n        });\n      },\n      refresh: function refresh() {\n        // @ts-ignore startTransition exists\n        _react[\"default\"].startTransition(function () {\n          dispatch({\n            type: _reducer.ACTION_REFRESH,\n            // TODO-APP: revisit if this needs to be passed.\n            cache: {\n              status: _appRouterContext.CacheStates.LAZY_INITIALIZED,\n              data: null,\n              subTreeData: null,\n              parallelRoutes: new Map()\n            },\n            mutable: {}\n          });\n        });\n      }\n    };\n    return routerInstance;\n  }, [dispatch, initialTree]);\n  (0, _react).useEffect(function () {\n    // When mpaNavigation flag is set do a hard navigation to the new url.\n    if (pushRef.mpaNavigation) {\n      window.location.href = canonicalUrl;\n      return;\n    } // Identifier is shortened intentionally.\n    // __NA is used to identify if the history entry can be handled by the app-router.\n    // __N is used to identify if the history entry can be handled by the old router.\n\n\n    var historyState = {\n      __NA: true,\n      tree: tree\n    };\n\n    if (pushRef.pendingPush && (0, _reducer).createHrefFromUrl(new URL(window.location.href)) !== canonicalUrl) {\n      // This intentionally mutates React state, pushRef is overwritten to ensure additional push/replace calls do not trigger an additional history entry.\n      pushRef.pendingPush = false;\n      window.history.pushState(historyState, '', canonicalUrl);\n    } else {\n      window.history.replaceState(historyState, '', canonicalUrl);\n    }\n\n    sync();\n  }, [tree, pushRef, canonicalUrl, sync]); // Add `window.nd` for debugging purposes.\n  // This is not meant for use in applications as concurrent rendering will affect the cache/tree/router.\n\n  if (true) {\n    // @ts-ignore this is for debugging\n    window.nd = {\n      router: appRouter,\n      cache: cache,\n      prefetchCache: prefetchCache,\n      tree: tree\n    };\n  }\n  /**\n  * Handle popstate event, this is used to handle back/forward in the browser.\n  * By default dispatches ACTION_RESTORE, however if the history entry was not pushed/replaced by app-router it will reload the page.\n  * That case can happen when the old router injected the history entry.\n  */\n\n\n  var onPopState = (0, _react).useCallback(function (_ref2) {\n    var state = _ref2.state;\n\n    if (!state) {\n      // TODO-APP: this case only happens when pushState/replaceState was called outside of Next.js. It should probably reload the page in this case.\n      return;\n    } // TODO-APP: this case happens when pushState/replaceState was called outside of Next.js or when the history entry was pushed by the old router.\n    // It reloads the page in this case but we might have to revisit this as the old router ignores it.\n\n\n    if (!state.__NA) {\n      window.location.reload();\n      return;\n    } // @ts-ignore useTransition exists\n    // TODO-APP: Ideally the back button should not use startTransition as it should apply the updates synchronously\n    // Without startTransition works if the cache is there for this path\n\n\n    _react[\"default\"].startTransition(function () {\n      dispatch({\n        type: _reducer.ACTION_RESTORE,\n        url: new URL(window.location.href),\n        tree: state.tree\n      });\n    });\n  }, [dispatch]); // Register popstate event to call onPopstate.\n\n  (0, _react).useEffect(function () {\n    window.addEventListener('popstate', onPopState);\n    return function () {\n      window.removeEventListener('popstate', onPopState);\n    };\n  }, [onPopState]);\n\n  var content = /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, head || initialHead, cache.subTreeData);\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_hooksClientContext.PathnameContext.Provider, {\n    value: pathname\n  }, /*#__PURE__*/_react[\"default\"].createElement(_hooksClientContext.SearchParamsContext.Provider, {\n    value: searchParams\n  }, /*#__PURE__*/_react[\"default\"].createElement(_appRouterContext.GlobalLayoutRouterContext.Provider, {\n    value: {\n      changeByServerResponse: changeByServerResponse,\n      tree: tree,\n      focusAndScrollRef: focusAndScrollRef\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_appRouterContext.AppRouterContext.Provider, {\n    value: appRouter\n  }, /*#__PURE__*/_react[\"default\"].createElement(_appRouterContext.LayoutRouterContext.Provider, {\n    value: {\n      childNodes: cache.parallelRoutes,\n      tree: tree,\n      // Root node always has `url`\n      // Provided in AppTreeContext to ensure it can be overwritten in layout-router\n      url: canonicalUrl\n    }\n  }, HotReloader ? /*#__PURE__*/_react[\"default\"].createElement(HotReloader, {\n    assetPrefix: assetPrefix\n  }, content) : content)))));\n}\n\n_s(Router, \"E4Qd1Kk83CxC+YgSLfkcNAcoSWY=\", true);\n\n_c2 = Router;\n\nif ((typeof exports[\"default\"] === 'function' || typeof exports[\"default\"] === 'object' && exports[\"default\"] !== null) && typeof exports[\"default\"].__esModule === 'undefined') {\n  Object.defineProperty(exports[\"default\"], '__esModule', {\n    value: true\n  });\n  Object.assign(exports[\"default\"], exports);\n  module.exports = exports[\"default\"];\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppRouter\");\n$RefreshReg$(_c2, \"Router\");\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/app-router.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/error-boundary.js":
/*!********************************************************************!*\
  !*** ./node_modules/next/dist/client/components/error-boundary.js ***!
  \********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar _classCallCheck = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck.js\");\n\nvar _createClass = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass.js\");\n\nvar _inherits = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/inherits.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/inherits.js\");\n\nvar _possibleConstructorReturn = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn.js\");\n\nvar _getPrototypeOf = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf.js\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ErrorBoundary = ErrorBoundary;\nexports.GlobalErrorComponent = GlobalErrorComponent;\n\nvar _interop_require_default = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_default.js */ \"./node_modules/@swc/helpers/lib/_interop_require_default.js\")[\"default\"]);\n\nvar _react = _interop_require_default(__webpack_require__(/*! react */ \"./node_modules/next/dist/compiled/react/index.js\"));\n/**\n * Handles errors through `getDerivedStateFromError`.\n * Renders the provided error component and provides a way to `reset` the error boundary state.\n */\n\n\nvar ErrorBoundaryHandler = /*#__PURE__*/function (_react$default$Compon) {\n  _inherits(ErrorBoundaryHandler, _react$default$Compon);\n\n  var _super = _createSuper(ErrorBoundaryHandler);\n\n  function ErrorBoundaryHandler(props) {\n    var _this;\n\n    _classCallCheck(this, ErrorBoundaryHandler);\n\n    _this = _super.call(this, props);\n\n    _this.reset = function () {\n      _this.setState({\n        error: null\n      });\n    };\n\n    _this.state = {\n      error: null\n    };\n    return _this;\n  }\n\n  _createClass(ErrorBoundaryHandler, [{\n    key: \"render\",\n    value: function render() {\n      if (this.state.error) {\n        return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, this.props.errorStyles, /*#__PURE__*/_react[\"default\"].createElement(this.props.errorComponent, {\n          error: this.state.error,\n          reset: this.reset\n        }));\n      }\n\n      return this.props.children;\n    }\n  }], [{\n    key: \"getDerivedStateFromError\",\n    value: function getDerivedStateFromError(error) {\n      return {\n        error: error\n      };\n    }\n  }]);\n\n  return ErrorBoundaryHandler;\n}(_react[\"default\"].Component);\n\nfunction ErrorBoundary(_ref) {\n  var errorComponent = _ref.errorComponent,\n      errorStyles = _ref.errorStyles,\n      children = _ref.children;\n\n  if (errorComponent) {\n    return /*#__PURE__*/_react[\"default\"].createElement(ErrorBoundaryHandler, {\n      errorComponent: errorComponent,\n      errorStyles: errorStyles\n    }, children);\n  }\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, children);\n}\n\n_c = ErrorBoundary;\nvar styles = {\n  error: {\n    fontFamily: '-apple-system, BlinkMacSystemFont, Roboto, \"Segoe UI\", \"Fira Sans\", Avenir, \"Helvetica Neue\", \"Lucida Grande\", sans-serif',\n    height: '100vh',\n    textAlign: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  desc: {\n    display: 'inline-block',\n    textAlign: 'left',\n    lineHeight: '49px',\n    height: '49px',\n    verticalAlign: 'middle'\n  },\n  h2: {\n    fontSize: '14px',\n    fontWeight: 'normal',\n    lineHeight: '49px',\n    margin: 0,\n    padding: 0\n  }\n};\n\nfunction GlobalErrorComponent() {\n  return /*#__PURE__*/_react[\"default\"].createElement(\"html\", null, /*#__PURE__*/_react[\"default\"].createElement(\"body\", null, /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n    style: styles.error\n  }, /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n    style: styles.desc\n  }, /*#__PURE__*/_react[\"default\"].createElement(\"h2\", {\n    style: styles.h2\n  }, \"Application error: a client-side exception has occurred (see the browser console for more information).\")))));\n}\n\n_c2 = GlobalErrorComponent;\n\nif ((typeof exports[\"default\"] === 'function' || typeof exports[\"default\"] === 'object' && exports[\"default\"] !== null) && typeof exports[\"default\"].__esModule === 'undefined') {\n  Object.defineProperty(exports[\"default\"], '__esModule', {\n    value: true\n  });\n  Object.assign(exports[\"default\"], exports);\n  module.exports = exports[\"default\"];\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ErrorBoundary\");\n$RefreshReg$(_c2, \"GlobalErrorComponent\");\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/error-boundary.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/infinite-promise.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/client/components/infinite-promise.js ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.createInfinitePromise = createInfinitePromise;\n/**\n * Used to cache in createInfinitePromise\n */\n\nvar infinitePromise;\n\nfunction createInfinitePromise() {\n  if (!infinitePromise) {\n    // Only create the Promise once\n    infinitePromise = new Promise(function () {// This is used to debug when the rendering is never updated.\n      // setTimeout(() => {\n      //   infinitePromise = new Error('Infinite promise')\n      //   resolve()\n      // }, 5000)\n    });\n  }\n\n  return infinitePromise;\n}\n\nif ((typeof exports[\"default\"] === 'function' || typeof exports[\"default\"] === 'object' && exports[\"default\"] !== null) && typeof exports[\"default\"].__esModule === 'undefined') {\n  Object.defineProperty(exports[\"default\"], '__esModule', {\n    value: true\n  });\n  Object.assign(exports[\"default\"], exports);\n  module.exports = exports[\"default\"];\n}\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2luZmluaXRlLXByb21pc2UuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUN6Q0csS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELDZCQUFBLEdBQWdDRSxxQkFBaEM7QUFDQTtBQUNBO0FBQ0E7O0FBQUksSUFBSUMsZUFBSjs7QUFDSixTQUFTRCxxQkFBVCxHQUFpQztFQUM3QixJQUFJLENBQUNDLGVBQUwsRUFBc0I7SUFDbEI7SUFDQUEsZUFBZSxHQUFHLElBQUlDLE9BQUosQ0FBWSxZQUFJLENBQ2xDO01BQ0E7TUFDQTtNQUNBO01BQ0E7SUFDQyxDQU5pQixDQUFsQjtFQU9IOztFQUNELE9BQU9ELGVBQVA7QUFDSDs7QUFFRCxJQUFJLENBQUMsT0FBT0gsT0FBTyxXQUFkLEtBQTJCLFVBQTNCLElBQTBDLE9BQU9BLE9BQU8sV0FBZCxLQUEyQixRQUEzQixJQUF1Q0EsT0FBTyxXQUFQLEtBQW9CLElBQXRHLEtBQWdILE9BQU9BLE9BQU8sV0FBUCxDQUFnQkssVUFBdkIsS0FBc0MsV0FBMUosRUFBdUs7RUFDcktQLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBTyxXQUE3QixFQUF1QyxZQUF2QyxFQUFxRDtJQUFFQyxLQUFLLEVBQUU7RUFBVCxDQUFyRDtFQUNBSCxNQUFNLENBQUNRLE1BQVAsQ0FBY04sT0FBTyxXQUFyQixFQUErQkEsT0FBL0I7RUFDQU8sTUFBTSxDQUFDUCxPQUFQLEdBQWlCQSxPQUFPLFdBQXhCO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9pbmZpbml0ZS1wcm9taXNlLmpzPzcyZmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZUluZmluaXRlUHJvbWlzZSA9IGNyZWF0ZUluZmluaXRlUHJvbWlzZTtcbi8qKlxuICogVXNlZCB0byBjYWNoZSBpbiBjcmVhdGVJbmZpbml0ZVByb21pc2VcbiAqLyBsZXQgaW5maW5pdGVQcm9taXNlO1xuZnVuY3Rpb24gY3JlYXRlSW5maW5pdGVQcm9taXNlKCkge1xuICAgIGlmICghaW5maW5pdGVQcm9taXNlKSB7XG4gICAgICAgIC8vIE9ubHkgY3JlYXRlIHRoZSBQcm9taXNlIG9uY2VcbiAgICAgICAgaW5maW5pdGVQcm9taXNlID0gbmV3IFByb21pc2UoKCk9PntcbiAgICAgICAgLy8gVGhpcyBpcyB1c2VkIHRvIGRlYnVnIHdoZW4gdGhlIHJlbmRlcmluZyBpcyBuZXZlciB1cGRhdGVkLlxuICAgICAgICAvLyBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgLy8gICBpbmZpbml0ZVByb21pc2UgPSBuZXcgRXJyb3IoJ0luZmluaXRlIHByb21pc2UnKVxuICAgICAgICAvLyAgIHJlc29sdmUoKVxuICAgICAgICAvLyB9LCA1MDAwKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGluZmluaXRlUHJvbWlzZTtcbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5maW5pdGUtcHJvbWlzZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcmVhdGVJbmZpbml0ZVByb21pc2UiLCJpbmZpbml0ZVByb21pc2UiLCJQcm9taXNlIiwiX19lc01vZHVsZSIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/infinite-promise.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/layout-router.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/client/components/layout-router.js ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\"use client\";\n\"use strict\";\n\nvar _classCallCheck = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck.js\");\n\nvar _createClass = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass.js\");\n\nvar _inherits = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/inherits.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/inherits.js\");\n\nvar _possibleConstructorReturn = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn.js\");\n\nvar _getPrototypeOf = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf.js\");\n\nvar _toConsumableArray = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray.js\");\n\nvar _defineProperty = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js\");\n\nvar _slicedToArray = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray.js\");\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = OuterLayoutRouter;\nexports.InnerLayoutRouter = InnerLayoutRouter;\n\nvar _extends = (__webpack_require__(/*! @swc/helpers/lib/_extends.js */ \"./node_modules/@swc/helpers/lib/_extends.js\")[\"default\"]);\n\nvar _interop_require_wildcard = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_wildcard.js */ \"./node_modules/@swc/helpers/lib/_interop_require_wildcard.js\")[\"default\"]);\n\nvar _react = _interop_require_wildcard(__webpack_require__(/*! react */ \"./node_modules/next/dist/compiled/react/index.js\"));\n\nvar _appRouterContext = __webpack_require__(/*! ../../shared/lib/app-router-context */ \"./node_modules/next/dist/shared/lib/app-router-context.js\");\n\nvar _appRouter = __webpack_require__(/*! ./app-router */ \"./node_modules/next/dist/client/components/app-router.js\");\n\nvar _infinitePromise = __webpack_require__(/*! ./infinite-promise */ \"./node_modules/next/dist/client/components/infinite-promise.js\");\n\nvar _errorBoundary = __webpack_require__(/*! ./error-boundary */ \"./node_modules/next/dist/client/components/error-boundary.js\");\n\nvar _matchSegments = __webpack_require__(/*! ./match-segments */ \"./node_modules/next/dist/client/components/match-segments.js\");\n\nvar _navigation = __webpack_require__(/*! ./navigation */ \"./node_modules/next/dist/client/components/navigation.js\");\n\nfunction OuterLayoutRouter(_ref) {\n  _s();\n\n  var parallelRouterKey = _ref.parallelRouterKey,\n      segmentPath = _ref.segmentPath,\n      childProp = _ref.childProp,\n      error = _ref.error,\n      errorStyles = _ref.errorStyles,\n      templateStyles = _ref.templateStyles,\n      loading = _ref.loading,\n      loadingStyles = _ref.loadingStyles,\n      hasLoading = _ref.hasLoading,\n      template = _ref.template,\n      notFound = _ref.notFound,\n      notFoundStyles = _ref.notFoundStyles,\n      rootLayoutIncluded = _ref.rootLayoutIncluded;\n  var context = (0, _react).useContext(_appRouterContext.LayoutRouterContext);\n\n  if (!context) {\n    throw new Error('invariant expected layout router to be mounted');\n  }\n\n  var childNodes = context.childNodes,\n      tree = context.tree,\n      url = context.url; // Get the current parallelRouter cache node\n\n  var childNodesForParallelRouter = childNodes.get(parallelRouterKey); // If the parallel router cache node does not exist yet, create it.\n  // This writes to the cache when there is no item in the cache yet. It never *overwrites* existing cache items which is why it's safe in concurrent mode.\n\n  if (!childNodesForParallelRouter) {\n    childNodes.set(parallelRouterKey, new Map());\n    childNodesForParallelRouter = childNodes.get(parallelRouterKey);\n  } // Get the active segment in the tree\n  // The reason arrays are used in the data format is that these are transferred from the server to the browser so it's optimized to save bytes.\n\n\n  var treeSegment = tree[1][parallelRouterKey][0];\n  var childPropSegment = Array.isArray(childProp.segment) ? childProp.segment[1] : childProp.segment; // If segment is an array it's a dynamic route and we want to read the dynamic route value as the segment to get from the cache.\n\n  var currentChildSegment = Array.isArray(treeSegment) ? treeSegment[1] : treeSegment;\n  /**\n  * Decides which segments to keep rendering, all segments that are not active will be wrapped in `<Offscreen>`.\n  */\n  // TODO-APP: Add handling of `<Offscreen>` when it's available.\n\n  var preservedSegments = [currentChildSegment];\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, preservedSegments.map(function (preservedSegment) {\n    return (\n      /*\n      - Error boundary\n      - Only renders error boundary if error component is provided.\n      - Rendered for each segment to ensure they have their own error state.\n      - Loading boundary\n      - Only renders suspense boundary if loading components is provided.\n      - Rendered for each segment to ensure they have their own loading state.\n      - Passed to the router during rendering to ensure it can be immediately rendered when suspending on a Flight fetch.\n      */\n\n      /*#__PURE__*/\n      _react[\"default\"].createElement(_appRouterContext.TemplateContext.Provider, {\n        key: preservedSegment,\n        value: /*#__PURE__*/_react[\"default\"].createElement(_errorBoundary.ErrorBoundary, {\n          errorComponent: error,\n          errorStyles: errorStyles\n        }, /*#__PURE__*/_react[\"default\"].createElement(LoadingBoundary, {\n          hasLoading: hasLoading,\n          loading: loading,\n          loadingStyles: loadingStyles\n        }, /*#__PURE__*/_react[\"default\"].createElement(NotFoundBoundary, {\n          notFound: notFound,\n          notFoundStyles: notFoundStyles\n        }, /*#__PURE__*/_react[\"default\"].createElement(RedirectBoundary, null, /*#__PURE__*/_react[\"default\"].createElement(InnerLayoutRouter, {\n          parallelRouterKey: parallelRouterKey,\n          url: url,\n          tree: tree,\n          childNodes: childNodesForParallelRouter,\n          childProp: childPropSegment === preservedSegment ? childProp : null,\n          segmentPath: segmentPath,\n          path: preservedSegment,\n          isActive: currentChildSegment === preservedSegment,\n          rootLayoutIncluded: rootLayoutIncluded\n        })))))\n      }, /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, templateStyles, template))\n    );\n  }));\n}\n/**\n * Add refetch marker to router state at the point of the current layout segment.\n * This ensures the response returned is not further down than the current layout segment.\n */\n\n\n_s(OuterLayoutRouter, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\n_c = OuterLayoutRouter;\n\nfunction walkAddRefetch(segmentPathToWalk, treeToRecreate) {\n  if (segmentPathToWalk) {\n    var _segmentPathToWalk = _slicedToArray(segmentPathToWalk, 2),\n        segment = _segmentPathToWalk[0],\n        parallelRouteKey = _segmentPathToWalk[1];\n\n    var isLast = segmentPathToWalk.length === 2;\n\n    if ((0, _matchSegments).matchSegment(treeToRecreate[0], segment)) {\n      if (treeToRecreate[1].hasOwnProperty(parallelRouteKey)) {\n        if (isLast) {\n          var subTree = walkAddRefetch(undefined, treeToRecreate[1][parallelRouteKey]);\n          return [treeToRecreate[0], _extends({}, treeToRecreate[1], _defineProperty({}, parallelRouteKey, [subTree[0], subTree[1], subTree[2], 'refetch']))];\n        }\n\n        return [treeToRecreate[0], _extends({}, treeToRecreate[1], _defineProperty({}, parallelRouteKey, walkAddRefetch(segmentPathToWalk.slice(2), treeToRecreate[1][parallelRouteKey])))];\n      }\n    }\n  }\n\n  return treeToRecreate;\n}\n/**\n * Check if the top of the HTMLElement is in the viewport.\n */\n\n\nfunction topOfElementInViewport(element) {\n  var rect = element.getBoundingClientRect();\n  return rect.top >= 0;\n}\n\nfunction InnerLayoutRouter(_ref2) {\n  _s2();\n\n  var parallelRouterKey = _ref2.parallelRouterKey,\n      url = _ref2.url,\n      childNodes = _ref2.childNodes,\n      childProp = _ref2.childProp,\n      segmentPath = _ref2.segmentPath,\n      tree = _ref2.tree,\n      path = _ref2.path,\n      rootLayoutIncluded = _ref2.rootLayoutIncluded;\n  var context = (0, _react).useContext(_appRouterContext.GlobalLayoutRouterContext);\n\n  if (!context) {\n    throw new Error('invariant global layout router not mounted');\n  }\n\n  var changeByServerResponse = context.changeByServerResponse,\n      fullTree = context.tree,\n      focusAndScrollRef = context.focusAndScrollRef;\n  var focusAndScrollElementRef = (0, _react).useRef(null);\n  (0, _react).useEffect(function () {\n    // Handle scroll and focus, it's only applied once in the first useEffect that triggers that changed.\n    if (focusAndScrollRef.apply && focusAndScrollElementRef.current) {\n      // State is mutated to ensure that the focus and scroll is applied only once.\n      focusAndScrollRef.apply = false; // Set focus on the element\n\n      focusAndScrollElementRef.current.focus(); // Only scroll into viewport when the layout is not visible currently.\n\n      if (!topOfElementInViewport(focusAndScrollElementRef.current)) {\n        var htmlElement = document.documentElement;\n        var existing = htmlElement.style.scrollBehavior;\n        htmlElement.style.scrollBehavior = 'auto';\n        focusAndScrollElementRef.current.scrollIntoView();\n        htmlElement.style.scrollBehavior = existing;\n      }\n    }\n  }, [focusAndScrollRef]); // Read segment path from the parallel router cache node.\n\n  var childNode = childNodes.get(path); // If childProp is available this means it's the Flight / SSR case.\n\n  if (childProp && // TODO-APP: verify if this can be null based on user code\n  childProp.current !== null) {\n    if (childNode && childNode.status === _appRouterContext.CacheStates.LAZY_INITIALIZED) {\n      // @ts-expect-error TODO-APP: handle changing of the type\n      childNode.status = _appRouterContext.CacheStates.READY; // @ts-expect-error TODO-APP: handle changing of the type\n\n      childNode.subTreeData = childProp.current; // Mutates the prop in order to clean up the memory associated with the subTreeData as it is now part of the cache.\n\n      childProp.current = null;\n    } else {\n      // Add the segment's subTreeData to the cache.\n      // This writes to the cache when there is no item in the cache yet. It never *overwrites* existing cache items which is why it's safe in concurrent mode.\n      childNodes.set(path, {\n        status: _appRouterContext.CacheStates.READY,\n        data: null,\n        subTreeData: childProp.current,\n        parallelRoutes: new Map()\n      }); // Mutates the prop in order to clean up the memory associated with the subTreeData as it is now part of the cache.\n\n      childProp.current = null; // In the above case childNode was set on childNodes, so we have to get it from the cacheNodes again.\n\n      childNode = childNodes.get(path);\n    }\n  } // When childNode is not available during rendering client-side we need to fetch it from the server.\n\n\n  if (!childNode || childNode.status === _appRouterContext.CacheStates.LAZY_INITIALIZED) {\n    /**\n    * Router state with refetch marker added\n    */\n    // TODO-APP: remove ''\n    var refetchTree = walkAddRefetch([''].concat(_toConsumableArray(segmentPath)), fullTree);\n    /**\n    * Flight data fetch kicked off during render and put into the cache.\n    */\n\n    childNodes.set(path, {\n      status: _appRouterContext.CacheStates.DATA_FETCH,\n      data: (0, _appRouter).fetchServerResponse(new URL(url, location.origin), refetchTree),\n      subTreeData: null,\n      head: childNode && childNode.status === _appRouterContext.CacheStates.LAZY_INITIALIZED ? childNode.head : undefined,\n      parallelRoutes: childNode && childNode.status === _appRouterContext.CacheStates.LAZY_INITIALIZED ? childNode.parallelRoutes : new Map()\n    }); // In the above case childNode was set on childNodes, so we have to get it from the cacheNodes again.\n\n    childNode = childNodes.get(path);\n  } // This case should never happen so it throws an error. It indicates there's a bug in the Next.js.\n\n\n  if (!childNode) {\n    throw new Error('Child node should always exist');\n  } // This case should never happen so it throws an error. It indicates there's a bug in the Next.js.\n\n\n  if (childNode.subTreeData && childNode.data) {\n    throw new Error('Child node should not have both subTreeData and data');\n  } // If cache node has a data request we have to unwrap response by `use` and update the cache.\n\n\n  if (childNode.data) {\n    // TODO-APP: error case\n\n    /**\n    * Flight response data\n    */\n    // When the data has not resolved yet `use` will suspend here.\n    var _use = (0, _react).use(childNode.data),\n        _use2 = _slicedToArray(_use, 2),\n        flightData = _use2[0],\n        overrideCanonicalUrl = _use2[1]; // Handle case when navigating to page in `pages` from `app`\n\n\n    if (typeof flightData === 'string') {\n      window.location.href = url;\n      return null;\n    } // segmentPath from the server does not match the layout's segmentPath\n\n\n    childNode.data = null; // setTimeout is used to start a new transition during render, this is an intentional hack around React.\n\n    setTimeout(function () {\n      // @ts-ignore startTransition exists\n      _react[\"default\"].startTransition(function () {\n        // TODO-APP: handle redirect\n        changeByServerResponse(fullTree, flightData, overrideCanonicalUrl);\n      });\n    }); // Suspend infinitely as `changeByServerResponse` will cause a different part of the tree to be rendered.\n\n    (0, _react).use((0, _infinitePromise).createInfinitePromise());\n  } // If cache node has no subTreeData and no data request we have to infinitely suspend as the data will likely flow in from another place.\n  // TODO-APP: double check users can't return null in a component that will kick in here.\n\n\n  if (!childNode.subTreeData) {\n    (0, _react).use((0, _infinitePromise).createInfinitePromise());\n  }\n\n  var subtree = // The layout router context narrows down tree and childNodes at each level.\n\n  /*#__PURE__*/\n  _react[\"default\"].createElement(_appRouterContext.LayoutRouterContext.Provider, {\n    value: {\n      tree: tree[1][parallelRouterKey],\n      childNodes: childNode.parallelRoutes,\n      // TODO-APP: overriding of url for parallel routes\n      url: url\n    }\n  }, childNode.subTreeData); // Ensure root layout is not wrapped in a div as the root layout renders `<html>`\n\n\n  return rootLayoutIncluded ? /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n    ref: focusAndScrollElementRef,\n    \"data-nextjs-scroll-focus-boundary\": ''\n  }, subtree) : subtree;\n}\n/**\n * Renders suspense boundary with the provided \"loading\" property as the fallback.\n * If no loading property is provided it renders the children without a suspense boundary.\n */\n\n\n_s2(InnerLayoutRouter, \"JQanpc2hF1A904pZOh54fuThoYw=\");\n\n_c2 = InnerLayoutRouter;\n\nfunction LoadingBoundary(_ref3) {\n  var children = _ref3.children,\n      loading = _ref3.loading,\n      loadingStyles = _ref3.loadingStyles,\n      hasLoading = _ref3.hasLoading;\n\n  if (hasLoading) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Suspense, {\n      fallback: /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, loadingStyles, loading)\n    }, children);\n  }\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, children);\n}\n\n_c3 = LoadingBoundary;\n\nfunction HandleRedirect(_ref4) {\n  _s3();\n\n  var redirect = _ref4.redirect;\n  var router = (0, _navigation).useRouter();\n  (0, _react).useEffect(function () {\n    router.replace(redirect, {});\n  }, [redirect, router]);\n  return null;\n}\n\n_s3(HandleRedirect, \"vQduR7x+OPXj6PSmJyFnf+hU7bg=\", true);\n\n_c4 = HandleRedirect;\n\nvar RedirectErrorBoundary = /*#__PURE__*/function (_react$default$Compon) {\n  _inherits(RedirectErrorBoundary, _react$default$Compon);\n\n  var _super = _createSuper(RedirectErrorBoundary);\n\n  function RedirectErrorBoundary(props) {\n    var _this;\n\n    _classCallCheck(this, RedirectErrorBoundary);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      redirect: null\n    };\n    return _this;\n  }\n\n  _createClass(RedirectErrorBoundary, [{\n    key: \"render\",\n    value: function render() {\n      var redirect = this.state.redirect;\n\n      if (redirect !== null) {\n        return /*#__PURE__*/_react[\"default\"].createElement(HandleRedirect, {\n          redirect: redirect\n        });\n      }\n\n      return this.props.children;\n    }\n  }], [{\n    key: \"getDerivedStateFromError\",\n    value: function getDerivedStateFromError(error) {\n      var ref;\n\n      if ((ref = error.digest) == null ? void 0 : ref.startsWith('NEXT_REDIRECT')) {\n        var url = error.digest.split(';')[1];\n        return {\n          redirect: url\n        };\n      } // Re-throw if error is not for redirect\n\n\n      throw error;\n    }\n  }]);\n\n  return RedirectErrorBoundary;\n}(_react[\"default\"].Component);\n\nfunction RedirectBoundary(_ref5) {\n  _s4();\n\n  var children = _ref5.children;\n  var router = (0, _navigation).useRouter();\n  return /*#__PURE__*/_react[\"default\"].createElement(RedirectErrorBoundary, {\n    router: router\n  }, children);\n}\n\n_s4(RedirectBoundary, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", true);\n\n_c5 = RedirectBoundary;\n\nvar NotFoundErrorBoundary = /*#__PURE__*/function (_react$default$Compon2) {\n  _inherits(NotFoundErrorBoundary, _react$default$Compon2);\n\n  var _super2 = _createSuper(NotFoundErrorBoundary);\n\n  function NotFoundErrorBoundary(props) {\n    var _this2;\n\n    _classCallCheck(this, NotFoundErrorBoundary);\n\n    _this2 = _super2.call(this, props);\n    _this2.state = {\n      notFoundTriggered: false\n    };\n    return _this2;\n  }\n\n  _createClass(NotFoundErrorBoundary, [{\n    key: \"render\",\n    value: function render() {\n      if (this.state.notFoundTriggered) {\n        return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(\"meta\", {\n          name: \"robots\",\n          content: \"noindex\"\n        }), this.props.notFoundStyles, this.props.notFound);\n      }\n\n      return this.props.children;\n    }\n  }], [{\n    key: \"getDerivedStateFromError\",\n    value: function getDerivedStateFromError(error) {\n      if (error.digest === 'NEXT_NOT_FOUND') {\n        return {\n          notFoundTriggered: true\n        };\n      } // Re-throw if error is not for 404\n\n\n      throw error;\n    }\n  }]);\n\n  return NotFoundErrorBoundary;\n}(_react[\"default\"].Component);\n\nfunction NotFoundBoundary(_ref6) {\n  var notFound = _ref6.notFound,\n      notFoundStyles = _ref6.notFoundStyles,\n      children = _ref6.children;\n  return notFound ? /*#__PURE__*/_react[\"default\"].createElement(NotFoundErrorBoundary, {\n    notFound: notFound,\n    notFoundStyles: notFoundStyles\n  }, children) : /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, children);\n}\n\n_c6 = NotFoundBoundary;\n\nif ((typeof exports[\"default\"] === 'function' || typeof exports[\"default\"] === 'object' && exports[\"default\"] !== null) && typeof exports[\"default\"].__esModule === 'undefined') {\n  Object.defineProperty(exports[\"default\"], '__esModule', {\n    value: true\n  });\n  Object.assign(exports[\"default\"], exports);\n  module.exports = exports[\"default\"];\n}\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"OuterLayoutRouter\");\n$RefreshReg$(_c2, \"InnerLayoutRouter\");\n$RefreshReg$(_c3, \"LoadingBoundary\");\n$RefreshReg$(_c4, \"HandleRedirect\");\n$RefreshReg$(_c5, \"RedirectBoundary\");\n$RefreshReg$(_c6, \"NotFoundBoundary\");\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/layout-router.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/match-segments.js":
/*!********************************************************************!*\
  !*** ./node_modules/next/dist/client/components/match-segments.js ***!
  \********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.matchSegment = void 0;\n\nvar matchSegment = function matchSegment(existingSegment, segment) {\n  // Common case: segment is just a string\n  if (typeof existingSegment === 'string' && typeof segment === 'string') {\n    return existingSegment === segment;\n  } // Dynamic parameter case: segment is an array with param/value. Both param and value are compared.\n\n\n  if (Array.isArray(existingSegment) && Array.isArray(segment)) {\n    return existingSegment[0] === segment[0] && existingSegment[1] === segment[1];\n  }\n\n  return false;\n};\n\nexports.matchSegment = matchSegment;\n\nif ((typeof exports[\"default\"] === 'function' || typeof exports[\"default\"] === 'object' && exports[\"default\"] !== null) && typeof exports[\"default\"].__esModule === 'undefined') {\n  Object.defineProperty(exports[\"default\"], '__esModule', {\n    value: true\n  });\n  Object.assign(exports[\"default\"], exports);\n  module.exports = exports[\"default\"];\n}\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL21hdGNoLXNlZ21lbnRzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7RUFDekNHLEtBQUssRUFBRTtBQURrQyxDQUE3QztBQUdBRCxvQkFBQSxHQUF1QixLQUFLLENBQTVCOztBQUNBLElBQU1FLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQUNDLGVBQUQsRUFBa0JDLE9BQWxCLEVBQTRCO0VBQzdDO0VBQ0EsSUFBSSxPQUFPRCxlQUFQLEtBQTJCLFFBQTNCLElBQXVDLE9BQU9DLE9BQVAsS0FBbUIsUUFBOUQsRUFBd0U7SUFDcEUsT0FBT0QsZUFBZSxLQUFLQyxPQUEzQjtFQUNILENBSjRDLENBSzdDOzs7RUFDQSxJQUFJQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsZUFBZCxLQUFrQ0UsS0FBSyxDQUFDQyxPQUFOLENBQWNGLE9BQWQsQ0FBdEMsRUFBOEQ7SUFDMUQsT0FBT0QsZUFBZSxDQUFDLENBQUQsQ0FBZixLQUF1QkMsT0FBTyxDQUFDLENBQUQsQ0FBOUIsSUFBcUNELGVBQWUsQ0FBQyxDQUFELENBQWYsS0FBdUJDLE9BQU8sQ0FBQyxDQUFELENBQTFFO0VBQ0g7O0VBQ0QsT0FBTyxLQUFQO0FBQ0gsQ0FWRDs7QUFXQUosb0JBQUEsR0FBdUJFLFlBQXZCOztBQUVBLElBQUksQ0FBQyxPQUFPRixPQUFPLFdBQWQsS0FBMkIsVUFBM0IsSUFBMEMsT0FBT0EsT0FBTyxXQUFkLEtBQTJCLFFBQTNCLElBQXVDQSxPQUFPLFdBQVAsS0FBb0IsSUFBdEcsS0FBZ0gsT0FBT0EsT0FBTyxXQUFQLENBQWdCTyxVQUF2QixLQUFzQyxXQUExSixFQUF1SztFQUNyS1QsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUFPLFdBQTdCLEVBQXVDLFlBQXZDLEVBQXFEO0lBQUVDLEtBQUssRUFBRTtFQUFULENBQXJEO0VBQ0FILE1BQU0sQ0FBQ1UsTUFBUCxDQUFjUixPQUFPLFdBQXJCLEVBQStCQSxPQUEvQjtFQUNBUyxNQUFNLENBQUNULE9BQVAsR0FBaUJBLE9BQU8sV0FBeEI7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL21hdGNoLXNlZ21lbnRzLmpzP2JjYjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLm1hdGNoU2VnbWVudCA9IHZvaWQgMDtcbmNvbnN0IG1hdGNoU2VnbWVudCA9IChleGlzdGluZ1NlZ21lbnQsIHNlZ21lbnQpPT57XG4gICAgLy8gQ29tbW9uIGNhc2U6IHNlZ21lbnQgaXMganVzdCBhIHN0cmluZ1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmdTZWdtZW50ID09PSAnc3RyaW5nJyAmJiB0eXBlb2Ygc2VnbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nU2VnbWVudCA9PT0gc2VnbWVudDtcbiAgICB9XG4gICAgLy8gRHluYW1pYyBwYXJhbWV0ZXIgY2FzZTogc2VnbWVudCBpcyBhbiBhcnJheSB3aXRoIHBhcmFtL3ZhbHVlLiBCb3RoIHBhcmFtIGFuZCB2YWx1ZSBhcmUgY29tcGFyZWQuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXhpc3RpbmdTZWdtZW50KSAmJiBBcnJheS5pc0FycmF5KHNlZ21lbnQpKSB7XG4gICAgICAgIHJldHVybiBleGlzdGluZ1NlZ21lbnRbMF0gPT09IHNlZ21lbnRbMF0gJiYgZXhpc3RpbmdTZWdtZW50WzFdID09PSBzZWdtZW50WzFdO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuZXhwb3J0cy5tYXRjaFNlZ21lbnQgPSBtYXRjaFNlZ21lbnQ7XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdGNoLXNlZ21lbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1hdGNoU2VnbWVudCIsImV4aXN0aW5nU2VnbWVudCIsInNlZ21lbnQiLCJBcnJheSIsImlzQXJyYXkiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/match-segments.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/reducer.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/client/components/reducer.js ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar _defineProperty = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js\");\n\nvar _toConsumableArray = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray.js\");\n\nvar _slicedToArray = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.createHrefFromUrl = createHrefFromUrl;\nexports.reducer = exports.ACTION_PREFETCH = exports.ACTION_SERVER_PATCH = exports.ACTION_RESTORE = exports.ACTION_NAVIGATE = exports.ACTION_REFRESH = void 0;\n\nvar _extends = (__webpack_require__(/*! @swc/helpers/lib/_extends.js */ \"./node_modules/@swc/helpers/lib/_extends.js\")[\"default\"]);\n\nvar _appRouterContext = __webpack_require__(/*! ../../shared/lib/app-router-context */ \"./node_modules/next/dist/shared/lib/app-router-context.js\");\n\nvar _matchSegments = __webpack_require__(/*! ./match-segments */ \"./node_modules/next/dist/client/components/match-segments.js\");\n\nvar _appRouter = __webpack_require__(/*! ./app-router */ \"./node_modules/next/dist/client/components/app-router.js\");\n/**\n * Create data fetching record for Promise.\n */\n// TODO-APP: change `any` to type inference.\n\n\nfunction createRecordFromThenable(thenable) {\n  thenable.status = 'pending';\n  thenable.then(function (value) {\n    if (thenable.status === 'pending') {\n      thenable.status = 'fulfilled';\n      thenable.value = value;\n    }\n  }, function (err) {\n    if (thenable.status === 'pending') {\n      thenable.status = 'rejected';\n      thenable.value = err;\n    }\n  });\n  return thenable;\n}\n/**\n * Read record value or throw Promise if it's not resolved yet.\n */\n\n\nfunction readRecordValue(thenable) {\n  // @ts-expect-error TODO: fix type\n  if (thenable.status === 'fulfilled') {\n    // @ts-expect-error TODO: fix type\n    return thenable.value;\n  } else {\n    throw thenable;\n  }\n}\n\nfunction createHrefFromUrl(url) {\n  return url.pathname + url.search + url.hash;\n}\n/**\n * Invalidate cache one level down from the router state.\n */\n// TODO-APP: Verify if this needs to be recursive.\n\n\nfunction invalidateCacheByRouterState(newCache, existingCache, routerState) {\n  // Remove segment that we got data for so that it is filled in during rendering of subTreeData.\n  for (var key in routerState[1]) {\n    var segmentForParallelRoute = routerState[1][key][0];\n    var cacheKey = Array.isArray(segmentForParallelRoute) ? segmentForParallelRoute[1] : segmentForParallelRoute;\n    var existingParallelRoutesCacheNode = existingCache.parallelRoutes.get(key);\n\n    if (existingParallelRoutesCacheNode) {\n      var parallelRouteCacheNode = new Map(existingParallelRoutesCacheNode);\n      parallelRouteCacheNode[\"delete\"](cacheKey);\n      newCache.parallelRoutes.set(key, parallelRouteCacheNode);\n    }\n  }\n}\n\nfunction fillLazyItemsTillLeafWithHead(newCache, existingCache, routerState, head) {\n  var isLastSegment = Object.keys(routerState[1]).length === 0;\n\n  if (isLastSegment) {\n    newCache.head = head;\n    return;\n  } // Remove segment that we got data for so that it is filled in during rendering of subTreeData.\n\n\n  for (var key in routerState[1]) {\n    var parallelRouteState = routerState[1][key];\n    var segmentForParallelRoute = parallelRouteState[0];\n    var cacheKey = Array.isArray(segmentForParallelRoute) ? segmentForParallelRoute[1] : segmentForParallelRoute;\n\n    if (existingCache) {\n      var existingParallelRoutesCacheNode = existingCache.parallelRoutes.get(key);\n\n      if (existingParallelRoutesCacheNode) {\n        var parallelRouteCacheNode = new Map(existingParallelRoutesCacheNode);\n        parallelRouteCacheNode[\"delete\"](cacheKey);\n        var _newCacheNode = {\n          status: _appRouterContext.CacheStates.LAZY_INITIALIZED,\n          data: null,\n          subTreeData: null,\n          parallelRoutes: new Map()\n        };\n        parallelRouteCacheNode.set(cacheKey, _newCacheNode);\n        fillLazyItemsTillLeafWithHead(_newCacheNode, undefined, parallelRouteState, head);\n        newCache.parallelRoutes.set(key, parallelRouteCacheNode);\n        continue;\n      }\n    }\n\n    var newCacheNode = {\n      status: _appRouterContext.CacheStates.LAZY_INITIALIZED,\n      data: null,\n      subTreeData: null,\n      parallelRoutes: new Map()\n    };\n    newCache.parallelRoutes.set(key, new Map([[cacheKey, newCacheNode]]));\n    fillLazyItemsTillLeafWithHead(newCacheNode, undefined, parallelRouteState, head);\n  }\n}\n/**\n * Fill cache with subTreeData based on flightDataPath\n */\n\n\nfunction fillCacheWithNewSubTreeData(newCache, existingCache, flightDataPath) {\n  var isLastEntry = flightDataPath.length <= 5;\n\n  var _flightDataPath = _slicedToArray(flightDataPath, 2),\n      parallelRouteKey = _flightDataPath[0],\n      segment = _flightDataPath[1];\n\n  var segmentForCache = Array.isArray(segment) ? segment[1] : segment;\n  var existingChildSegmentMap = existingCache.parallelRoutes.get(parallelRouteKey);\n\n  if (!existingChildSegmentMap) {\n    // Bailout because the existing cache does not have the path to the leaf node\n    // Will trigger lazy fetch in layout-router because of missing segment\n    return;\n  }\n\n  var childSegmentMap = newCache.parallelRoutes.get(parallelRouteKey);\n\n  if (!childSegmentMap || childSegmentMap === existingChildSegmentMap) {\n    childSegmentMap = new Map(existingChildSegmentMap);\n    newCache.parallelRoutes.set(parallelRouteKey, childSegmentMap);\n  }\n\n  var existingChildCacheNode = existingChildSegmentMap.get(segmentForCache);\n  var childCacheNode = childSegmentMap.get(segmentForCache);\n\n  if (isLastEntry) {\n    if (!childCacheNode || !childCacheNode.data || childCacheNode === existingChildCacheNode) {\n      childCacheNode = {\n        status: _appRouterContext.CacheStates.READY,\n        data: null,\n        subTreeData: flightDataPath[3],\n        // Ensure segments other than the one we got data for are preserved.\n        parallelRoutes: existingChildCacheNode ? new Map(existingChildCacheNode.parallelRoutes) : new Map()\n      };\n\n      if (existingChildCacheNode) {\n        invalidateCacheByRouterState(childCacheNode, existingChildCacheNode, flightDataPath[2]);\n      }\n\n      fillLazyItemsTillLeafWithHead(childCacheNode, existingChildCacheNode, flightDataPath[2], flightDataPath[4]);\n      childSegmentMap.set(segmentForCache, childCacheNode);\n    }\n\n    return;\n  }\n\n  if (!childCacheNode || !existingChildCacheNode) {\n    // Bailout because the existing cache does not have the path to the leaf node\n    // Will trigger lazy fetch in layout-router because of missing segment\n    return;\n  }\n\n  if (childCacheNode === existingChildCacheNode) {\n    childCacheNode = {\n      status: childCacheNode.status,\n      data: childCacheNode.data,\n      subTreeData: childCacheNode.subTreeData,\n      parallelRoutes: new Map(childCacheNode.parallelRoutes)\n    };\n    childSegmentMap.set(segmentForCache, childCacheNode);\n  }\n\n  fillCacheWithNewSubTreeData(childCacheNode, existingChildCacheNode, flightDataPath.slice(2));\n}\n/**\n * Fill cache up to the end of the flightSegmentPath, invalidating anything below it.\n */\n\n\nfunction invalidateCacheBelowFlightSegmentPath(newCache, existingCache, flightSegmentPath) {\n  var isLastEntry = flightSegmentPath.length <= 2;\n\n  var _flightSegmentPath = _slicedToArray(flightSegmentPath, 2),\n      parallelRouteKey = _flightSegmentPath[0],\n      segment = _flightSegmentPath[1];\n\n  var segmentForCache = Array.isArray(segment) ? segment[1] : segment;\n  var existingChildSegmentMap = existingCache.parallelRoutes.get(parallelRouteKey);\n\n  if (!existingChildSegmentMap) {\n    // Bailout because the existing cache does not have the path to the leaf node\n    // Will trigger lazy fetch in layout-router because of missing segment\n    return;\n  }\n\n  var childSegmentMap = newCache.parallelRoutes.get(parallelRouteKey);\n\n  if (!childSegmentMap || childSegmentMap === existingChildSegmentMap) {\n    childSegmentMap = new Map(existingChildSegmentMap);\n    newCache.parallelRoutes.set(parallelRouteKey, childSegmentMap);\n  } // In case of last entry don't copy further down.\n\n\n  if (isLastEntry) {\n    childSegmentMap[\"delete\"](segmentForCache);\n    return;\n  }\n\n  var existingChildCacheNode = existingChildSegmentMap.get(segmentForCache);\n  var childCacheNode = childSegmentMap.get(segmentForCache);\n\n  if (!childCacheNode || !existingChildCacheNode) {\n    // Bailout because the existing cache does not have the path to the leaf node\n    // Will trigger lazy fetch in layout-router because of missing segment\n    return;\n  }\n\n  if (childCacheNode === existingChildCacheNode) {\n    childCacheNode = {\n      status: childCacheNode.status,\n      data: childCacheNode.data,\n      subTreeData: childCacheNode.subTreeData,\n      parallelRoutes: new Map(childCacheNode.parallelRoutes)\n    };\n    childSegmentMap.set(segmentForCache, childCacheNode);\n  }\n\n  invalidateCacheBelowFlightSegmentPath(childCacheNode, existingChildCacheNode, flightSegmentPath.slice(2));\n}\n/**\n * Fill cache with subTreeData based on flightDataPath that was prefetched\n * This operation is append-only to the existing cache.\n */\n\n\nfunction fillCacheWithPrefetchedSubTreeData(existingCache, flightDataPath) {\n  var isLastEntry = flightDataPath.length <= 5;\n\n  var _flightDataPath2 = _slicedToArray(flightDataPath, 2),\n      parallelRouteKey = _flightDataPath2[0],\n      segment = _flightDataPath2[1];\n\n  var segmentForCache = Array.isArray(segment) ? segment[1] : segment;\n  var existingChildSegmentMap = existingCache.parallelRoutes.get(parallelRouteKey);\n\n  if (!existingChildSegmentMap) {\n    // Bailout because the existing cache does not have the path to the leaf node\n    return;\n  }\n\n  var existingChildCacheNode = existingChildSegmentMap.get(segmentForCache);\n\n  if (isLastEntry) {\n    if (!existingChildCacheNode) {\n      var childCacheNode = {\n        status: _appRouterContext.CacheStates.READY,\n        data: null,\n        subTreeData: flightDataPath[3],\n        parallelRoutes: new Map()\n      };\n      fillLazyItemsTillLeafWithHead(childCacheNode, existingChildCacheNode, flightDataPath[2], flightDataPath[4]);\n      existingChildSegmentMap.set(segmentForCache, childCacheNode);\n    }\n\n    return;\n  }\n\n  if (!existingChildCacheNode) {\n    // Bailout because the existing cache does not have the path to the leaf node\n    return;\n  }\n\n  fillCacheWithPrefetchedSubTreeData(existingChildCacheNode, flightDataPath.slice(2));\n}\n/**\n * Kick off fetch based on the common layout between two routes. Fill cache with data property holding the in-progress fetch.\n */\n\n\nfunction fillCacheWithDataProperty(newCache, existingCache, segments, fetchResponse) {\n  var isLastEntry = segments.length === 1;\n  var parallelRouteKey = 'children';\n\n  var _segments = _slicedToArray(segments, 1),\n      segment = _segments[0];\n\n  var existingChildSegmentMap = existingCache.parallelRoutes.get(parallelRouteKey);\n\n  if (!existingChildSegmentMap) {\n    // Bailout because the existing cache does not have the path to the leaf node\n    // Will trigger lazy fetch in layout-router because of missing segment\n    return {\n      bailOptimistic: true\n    };\n  }\n\n  var childSegmentMap = newCache.parallelRoutes.get(parallelRouteKey);\n\n  if (!childSegmentMap || childSegmentMap === existingChildSegmentMap) {\n    childSegmentMap = new Map(existingChildSegmentMap);\n    newCache.parallelRoutes.set(parallelRouteKey, childSegmentMap);\n  }\n\n  var existingChildCacheNode = existingChildSegmentMap.get(segment);\n  var childCacheNode = childSegmentMap.get(segment); // In case of last segment start off the fetch at this level and don't copy further down.\n\n  if (isLastEntry) {\n    if (!childCacheNode || !childCacheNode.data || childCacheNode === existingChildCacheNode) {\n      childSegmentMap.set(segment, {\n        status: _appRouterContext.CacheStates.DATA_FETCH,\n        data: fetchResponse(),\n        subTreeData: null,\n        parallelRoutes: new Map()\n      });\n    }\n\n    return;\n  }\n\n  if (!childCacheNode || !existingChildCacheNode) {\n    // Start fetch in the place where the existing cache doesn't have the data yet.\n    if (!childCacheNode) {\n      childSegmentMap.set(segment, {\n        status: _appRouterContext.CacheStates.DATA_FETCH,\n        data: fetchResponse(),\n        subTreeData: null,\n        parallelRoutes: new Map()\n      });\n    }\n\n    return;\n  }\n\n  if (childCacheNode === existingChildCacheNode) {\n    childCacheNode = {\n      status: childCacheNode.status,\n      data: childCacheNode.data,\n      subTreeData: childCacheNode.subTreeData,\n      parallelRoutes: new Map(childCacheNode.parallelRoutes)\n    };\n    childSegmentMap.set(segment, childCacheNode);\n  }\n\n  return fillCacheWithDataProperty(childCacheNode, existingChildCacheNode, segments.slice(1), fetchResponse);\n}\n/**\n * Create optimistic version of router state based on the existing router state and segments.\n * This is used to allow rendering layout-routers up till the point where data is missing.\n */\n\n\nfunction createOptimisticTree(segments, flightRouterState, _isFirstSegment, parentRefetch, _href) {\n  var _ref = flightRouterState || [null, {}],\n      _ref2 = _slicedToArray(_ref, 2),\n      existingSegment = _ref2[0],\n      existingParallelRoutes = _ref2[1];\n\n  var segment = segments[0];\n  var isLastSegment = segments.length === 1;\n  var segmentMatches = existingSegment !== null && (0, _matchSegments).matchSegment(existingSegment, segment);\n  var shouldRefetchThisLevel = !flightRouterState || !segmentMatches;\n  var parallelRoutes = {};\n\n  if (existingSegment !== null && segmentMatches) {\n    parallelRoutes = existingParallelRoutes;\n  }\n\n  var childTree;\n\n  if (!isLastSegment) {\n    var childItem = createOptimisticTree(segments.slice(1), parallelRoutes ? parallelRoutes.children : null, false, parentRefetch || shouldRefetchThisLevel);\n    childTree = childItem;\n  }\n\n  var result = [segment, _extends({}, parallelRoutes, childTree ? {\n    children: childTree\n  } : {})];\n\n  if (!parentRefetch && shouldRefetchThisLevel) {\n    result[3] = 'refetch';\n  } // TODO-APP: Revisit\n  // Add url into the tree\n  // if (isFirstSegment) {\n  //   result[2] = href\n  // }\n\n\n  return result;\n}\n/**\n * Apply the router state from the Flight response. Creates a new router state tree.\n */\n\n\nfunction applyRouterStatePatchToTree(flightSegmentPath, flightRouterState, treePatch) {\n  var _flightRouterState = _slicedToArray(flightRouterState, 5),\n      segment = _flightRouterState[0],\n      parallelRoutes = _flightRouterState[1],\n      isRootLayout = _flightRouterState[4]; // Root refresh\n\n\n  if (flightSegmentPath.length === 1) {\n    var _tree = _toConsumableArray(treePatch); // TODO-APP: revisit\n    // if (url) {\n    //   tree[2] = url\n    // }\n\n\n    return _tree;\n  }\n\n  var _flightSegmentPath2 = _slicedToArray(flightSegmentPath, 2),\n      currentSegment = _flightSegmentPath2[0],\n      parallelRouteKey = _flightSegmentPath2[1]; // Tree path returned from the server should always match up with the current tree in the browser\n\n\n  if (!(0, _matchSegments).matchSegment(currentSegment, segment)) {\n    return null;\n  }\n\n  var lastSegment = flightSegmentPath.length === 2;\n  var parallelRoutePatch;\n\n  if (lastSegment) {\n    parallelRoutePatch = treePatch;\n  } else {\n    parallelRoutePatch = applyRouterStatePatchToTree(flightSegmentPath.slice(2), parallelRoutes[parallelRouteKey], treePatch);\n\n    if (parallelRoutePatch === null) {\n      return null;\n    }\n  }\n\n  var tree = [flightSegmentPath[0], _extends({}, parallelRoutes, _defineProperty({}, parallelRouteKey, parallelRoutePatch))]; // Current segment is the root layout\n\n  if (isRootLayout) {\n    tree[4] = true;\n  } // TODO-APP: Revisit\n  // if (url) {\n  //   tree[2] = url\n  // }\n\n\n  return tree;\n}\n\nfunction shouldHardNavigate(flightSegmentPath, flightRouterState, treePatch) {\n  var _flightRouterState2 = _slicedToArray(flightRouterState, 2),\n      segment = _flightRouterState2[0],\n      parallelRoutes = _flightRouterState2[1]; // TODO-APP: Check if `as` can be replaced.\n\n\n  var _flightSegmentPath3 = _slicedToArray(flightSegmentPath, 2),\n      currentSegment = _flightSegmentPath3[0],\n      parallelRouteKey = _flightSegmentPath3[1]; // Check if current segment matches the existing segment.\n\n\n  if (!(0, _matchSegments).matchSegment(currentSegment, segment)) {\n    // If dynamic parameter in tree doesn't match up with segment path a hard navigation is triggered.\n    if (Array.isArray(currentSegment)) {\n      return true;\n    } // If the existing segment did not match soft navigation is triggered.\n\n\n    return false;\n  }\n\n  var lastSegment = flightSegmentPath.length <= 2;\n\n  if (lastSegment) {\n    return false;\n  }\n\n  return shouldHardNavigate(flightSegmentPath.slice(2), parallelRoutes[parallelRouteKey], treePatch);\n}\n\nfunction isNavigatingToNewRootLayout(currentTree, nextTree) {\n  // Compare segments\n  var currentTreeSegment = currentTree[0];\n  var nextTreeSegment = nextTree[0]; // If any segment is different before we find the root layout, the root layout has changed.\n  // E.g. /same/(group1)/layout.js -> /same/(group2)/layout.js\n  // First segment is 'same' for both, keep looking. (group1) changed to (group2) before the root layout was found, it must have changed.\n\n  if (Array.isArray(currentTreeSegment) && Array.isArray(nextTreeSegment)) {\n    // Compare dynamic param name and type but ignore the value, different values would not affect the current root layout\n    // /[name] - /slug1 and /slug2, both values (slug1 & slug2) still has the same layout /[name]/layout.js\n    if (currentTreeSegment[0] !== nextTreeSegment[0] || currentTreeSegment[2] !== nextTreeSegment[2]) {\n      return true;\n    }\n  } else if (currentTreeSegment !== nextTreeSegment) {\n    return true;\n  } // Current tree root layout found\n\n\n  if (currentTree[4]) {\n    // If the next tree doesn't have the root layout flag, it must have changed.\n    return !nextTree[4];\n  } // Current tree  didn't have its root layout here, must have changed.\n\n\n  if (nextTree[4]) {\n    return true;\n  } // We can't assume it's `parallelRoutes.children` here in case the root layout is `app/@something/layout.js`\n  // But it's not possible to be more than one parallelRoutes before the root layout is found\n  // TODO-APP: change to traverse all parallel routes\n\n\n  var currentTreeChild = Object.values(currentTree[1])[0];\n  var nextTreeChild = Object.values(nextTree[1])[0];\n  if (!currentTreeChild || !nextTreeChild) return true;\n  return isNavigatingToNewRootLayout(currentTreeChild, nextTreeChild);\n}\n\nvar ACTION_REFRESH = 'refresh';\nexports.ACTION_REFRESH = ACTION_REFRESH;\nvar ACTION_NAVIGATE = 'navigate';\nexports.ACTION_NAVIGATE = ACTION_NAVIGATE;\nvar ACTION_RESTORE = 'restore';\nexports.ACTION_RESTORE = ACTION_RESTORE;\nvar ACTION_SERVER_PATCH = 'server-patch';\nexports.ACTION_SERVER_PATCH = ACTION_SERVER_PATCH;\nvar ACTION_PREFETCH = 'prefetch';\nexports.ACTION_PREFETCH = ACTION_PREFETCH;\n/**\n * Reducer that handles the app-router state updates.\n */\n\nfunction clientReducer(state, action) {\n  switch (action.type) {\n    case ACTION_NAVIGATE:\n      {\n        var url = action.url,\n            navigateType = action.navigateType,\n            cache = action.cache,\n            mutable = action.mutable,\n            forceOptimisticNavigation = action.forceOptimisticNavigation;\n        var pathname = url.pathname,\n            search = url.search;\n        var href = createHrefFromUrl(url);\n        var pendingPush = navigateType === 'push';\n        var isForCurrentTree = JSON.stringify(mutable.previousTree) === JSON.stringify(state.tree);\n\n        if (mutable.mpaNavigation && isForCurrentTree) {\n          return {\n            // Set href.\n            canonicalUrl: mutable.canonicalUrlOverride ? mutable.canonicalUrlOverride : href,\n            // TODO-APP: verify mpaNavigation not being set is correct here.\n            pushRef: {\n              pendingPush: pendingPush,\n              mpaNavigation: mutable.mpaNavigation\n            },\n            // All navigation requires scroll and focus management to trigger.\n            focusAndScrollRef: {\n              apply: false\n            },\n            // Apply cache.\n            cache: state.cache,\n            prefetchCache: state.prefetchCache,\n            // Apply patched router state.\n            tree: state.tree\n          };\n        } // Handle concurrent rendering / strict mode case where the cache and tree were already populated.\n\n\n        if (mutable.patchedTree && isForCurrentTree) {\n          return {\n            // Set href.\n            canonicalUrl: mutable.canonicalUrlOverride ? mutable.canonicalUrlOverride : href,\n            // TODO-APP: verify mpaNavigation not being set is correct here.\n            pushRef: {\n              pendingPush: pendingPush,\n              mpaNavigation: false\n            },\n            // All navigation requires scroll and focus management to trigger.\n            focusAndScrollRef: {\n              apply: true\n            },\n            // Apply cache.\n            cache: mutable.useExistingCache ? state.cache : cache,\n            prefetchCache: state.prefetchCache,\n            // Apply patched router state.\n            tree: mutable.patchedTree\n          };\n        }\n\n        var prefetchValues = state.prefetchCache.get(href);\n\n        if (prefetchValues) {\n          // The one before last item is the router state tree patch\n          var _flightSegmentPath4 = prefetchValues.flightSegmentPath,\n              _newTree = prefetchValues.tree,\n              _canonicalUrlOverride = prefetchValues.canonicalUrlOverride;\n\n          if (_newTree !== null) {\n            mutable.previousTree = state.tree;\n            mutable.patchedTree = _newTree;\n            mutable.mpaNavigation = isNavigatingToNewRootLayout(state.tree, _newTree);\n            var hardNavigate = // TODO-APP: Revisit if this is correct.\n            search !== location.search || shouldHardNavigate( // TODO-APP: remove ''\n            [''].concat(_toConsumableArray(_flightSegmentPath4)), state.tree, _newTree);\n\n            if (hardNavigate) {\n              // TODO-APP: segments.slice(1) strips '', we can get rid of '' altogether.\n              // Copy subTreeData for the root node of the cache.\n              cache.subTreeData = state.cache.subTreeData;\n              invalidateCacheBelowFlightSegmentPath(cache, state.cache, _flightSegmentPath4);\n            } else {\n              mutable.useExistingCache = true;\n            }\n\n            var _canonicalUrlOverrideHref = _canonicalUrlOverride ? createHrefFromUrl(_canonicalUrlOverride) : undefined;\n\n            if (_canonicalUrlOverrideHref) {\n              mutable.canonicalUrlOverride = _canonicalUrlOverrideHref;\n            }\n\n            return {\n              // Set href.\n              canonicalUrl: _canonicalUrlOverrideHref ? _canonicalUrlOverrideHref : href,\n              // Set pendingPush.\n              pushRef: {\n                pendingPush: pendingPush,\n                mpaNavigation: false\n              },\n              // All navigation requires scroll and focus management to trigger.\n              focusAndScrollRef: {\n                apply: true\n              },\n              // Apply patched cache.\n              cache: mutable.useExistingCache ? state.cache : cache,\n              prefetchCache: state.prefetchCache,\n              // Apply patched tree.\n              tree: _newTree\n            };\n          }\n        } // When doing a hard push there can be two cases: with optimistic tree and without\n        // The with optimistic tree case only happens when the layouts have a loading state (loading.js)\n        // The without optimistic tree case happens when there is no loading state, in that case we suspend in this reducer\n        // forceOptimisticNavigation is used for links that have `prefetch={false}`.\n\n\n        if (forceOptimisticNavigation) {\n          var segments = pathname.split('/'); // TODO-APP: figure out something better for index pages\n\n          segments.push(''); // Optimistic tree case.\n          // If the optimistic tree is deeper than the current state leave that deeper part out of the fetch\n\n          var optimisticTree = createOptimisticTree(segments, state.tree, true, false, href); // Copy subTreeData for the root node of the cache.\n\n          cache.subTreeData = state.cache.subTreeData; // Copy existing cache nodes as far as possible and fill in `data` property with the started data fetch.\n          // The `data` property is used to suspend in layout-router during render if it hasn't resolved yet by the time it renders.\n\n          var res = fillCacheWithDataProperty(cache, state.cache, // TODO-APP: segments.slice(1) strips '', we can get rid of '' altogether.\n          segments.slice(1), function () {\n            return (0, _appRouter).fetchServerResponse(url, optimisticTree);\n          }); // If optimistic fetch couldn't happen it falls back to the non-optimistic case.\n\n          if (!(res == null ? void 0 : res.bailOptimistic)) {\n            mutable.previousTree = state.tree;\n            mutable.patchedTree = optimisticTree;\n            mutable.mpaNavigation = isNavigatingToNewRootLayout(state.tree, optimisticTree);\n            return {\n              // Set href.\n              canonicalUrl: href,\n              // Set pendingPush.\n              pushRef: {\n                pendingPush: pendingPush,\n                mpaNavigation: false\n              },\n              // All navigation requires scroll and focus management to trigger.\n              focusAndScrollRef: {\n                apply: true\n              },\n              // Apply patched cache.\n              cache: cache,\n              prefetchCache: state.prefetchCache,\n              // Apply optimistic tree.\n              tree: optimisticTree\n            };\n          }\n        } // Below is the not-optimistic case. Data is fetched at the root and suspended there without a suspense boundary.\n        // If no in-flight fetch at the top, start it.\n\n\n        if (!cache.data) {\n          cache.data = createRecordFromThenable((0, _appRouter).fetchServerResponse(url, state.tree));\n        } // Unwrap cache data with `use` to suspend here (in the reducer) until the fetch resolves.\n\n\n        var _readRecordValue = readRecordValue(cache.data),\n            _readRecordValue2 = _slicedToArray(_readRecordValue, 2),\n            flightData = _readRecordValue2[0],\n            canonicalUrlOverride = _readRecordValue2[1]; // Handle case when navigating to page in `pages` from `app`\n\n\n        if (typeof flightData === 'string') {\n          return {\n            canonicalUrl: flightData,\n            // Enable mpaNavigation\n            pushRef: {\n              pendingPush: true,\n              mpaNavigation: true\n            },\n            // Don't apply scroll and focus management.\n            focusAndScrollRef: {\n              apply: false\n            },\n            cache: state.cache,\n            prefetchCache: state.prefetchCache,\n            tree: state.tree\n          };\n        } // Remove cache.data as it has been resolved at this point.\n\n\n        cache.data = null; // TODO-APP: Currently the Flight data can only have one item but in the future it can have multiple paths.\n\n        var flightDataPath = flightData[0]; // The one before last item is the router state tree patch\n\n        var _flightDataPath$slice = flightDataPath.slice(-3),\n            _flightDataPath$slice2 = _slicedToArray(_flightDataPath$slice, 3),\n            treePatch = _flightDataPath$slice2[0],\n            subTreeData = _flightDataPath$slice2[1],\n            head = _flightDataPath$slice2[2]; // Path without the last segment, router state, and the subTreeData\n\n\n        var flightSegmentPath = flightDataPath.slice(0, -4); // Create new tree based on the flightSegmentPath and router state patch\n\n        var newTree = applyRouterStatePatchToTree( // TODO-APP: remove ''\n        [''].concat(_toConsumableArray(flightSegmentPath)), state.tree, treePatch);\n\n        if (newTree === null) {\n          throw new Error('SEGMENT MISMATCH');\n        }\n\n        var canonicalUrlOverrideHref = canonicalUrlOverride ? createHrefFromUrl(canonicalUrlOverride) : undefined;\n\n        if (canonicalUrlOverrideHref) {\n          mutable.canonicalUrlOverride = canonicalUrlOverrideHref;\n        }\n\n        mutable.previousTree = state.tree;\n        mutable.patchedTree = newTree;\n        mutable.mpaNavigation = isNavigatingToNewRootLayout(state.tree, newTree);\n\n        if (flightDataPath.length === 3) {\n          cache.subTreeData = subTreeData;\n          fillLazyItemsTillLeafWithHead(cache, state.cache, treePatch, head);\n        } else {\n          // Copy subTreeData for the root node of the cache.\n          cache.subTreeData = state.cache.subTreeData; // Create a copy of the existing cache with the subTreeData applied.\n\n          fillCacheWithNewSubTreeData(cache, state.cache, flightDataPath);\n        }\n\n        return {\n          // Set href.\n          canonicalUrl: canonicalUrlOverrideHref ? canonicalUrlOverrideHref : href,\n          // Set pendingPush.\n          pushRef: {\n            pendingPush: pendingPush,\n            mpaNavigation: false\n          },\n          // All navigation requires scroll and focus management to trigger.\n          focusAndScrollRef: {\n            apply: true\n          },\n          // Apply patched cache.\n          cache: cache,\n          prefetchCache: state.prefetchCache,\n          // Apply patched tree.\n          tree: newTree\n        };\n      }\n\n    case ACTION_SERVER_PATCH:\n      {\n        var _flightData = action.flightData,\n            previousTree = action.previousTree,\n            overrideCanonicalUrl = action.overrideCanonicalUrl,\n            _cache = action.cache,\n            _mutable = action.mutable; // When a fetch is slow to resolve it could be that you navigated away while the request was happening or before the reducer runs.\n        // In that case opt-out of applying the patch given that the data could be stale.\n\n        if (JSON.stringify(previousTree) !== JSON.stringify(state.tree)) {\n          // TODO-APP: Handle tree mismatch\n          console.log('TREE MISMATCH'); // Keep everything as-is.\n\n          return state;\n        }\n\n        if (_mutable.mpaNavigation) {\n          return {\n            // Set href.\n            canonicalUrl: _mutable.canonicalUrlOverride ? _mutable.canonicalUrlOverride : state.canonicalUrl,\n            // TODO-APP: verify mpaNavigation not being set is correct here.\n            pushRef: {\n              pendingPush: true,\n              mpaNavigation: _mutable.mpaNavigation\n            },\n            // All navigation requires scroll and focus management to trigger.\n            focusAndScrollRef: {\n              apply: false\n            },\n            // Apply cache.\n            cache: state.cache,\n            prefetchCache: state.prefetchCache,\n            // Apply patched router state.\n            tree: state.tree\n          };\n        } // Handle concurrent rendering / strict mode case where the cache and tree were already populated.\n\n\n        if (_mutable.patchedTree) {\n          return {\n            // Keep href as it was set during navigate / restore\n            canonicalUrl: _mutable.canonicalUrlOverride ? _mutable.canonicalUrlOverride : state.canonicalUrl,\n            // Keep pushRef as server-patch only causes cache/tree update.\n            pushRef: state.pushRef,\n            // Keep focusAndScrollRef as server-patch only causes cache/tree update.\n            focusAndScrollRef: state.focusAndScrollRef,\n            // Apply patched router state\n            tree: _mutable.patchedTree,\n            prefetchCache: state.prefetchCache,\n            // Apply patched cache\n            cache: _cache\n          };\n        } // Handle case when navigating to page in `pages` from `app`\n\n\n        if (typeof _flightData === 'string') {\n          return {\n            // Set href.\n            canonicalUrl: _flightData,\n            // Enable mpaNavigation as this is a navigation that the app-router shouldn't handle.\n            pushRef: {\n              pendingPush: true,\n              mpaNavigation: true\n            },\n            // Don't apply scroll and focus management.\n            focusAndScrollRef: {\n              apply: false\n            },\n            // Other state is kept as-is.\n            cache: state.cache,\n            prefetchCache: state.prefetchCache,\n            tree: state.tree\n          };\n        } // TODO-APP: Currently the Flight data can only have one item but in the future it can have multiple paths.\n\n\n        var _flightDataPath3 = _flightData[0]; // Slices off the last segment (which is at -4) as it doesn't exist in the tree yet\n\n        var _flightSegmentPath5 = _flightDataPath3.slice(0, -4);\n\n        var _flightDataPath3$slic = _flightDataPath3.slice(-3),\n            _flightDataPath3$slic2 = _slicedToArray(_flightDataPath3$slic, 3),\n            _treePatch = _flightDataPath3$slic2[0],\n            _subTreeData = _flightDataPath3$slic2[1],\n            _head = _flightDataPath3$slic2[2];\n\n        var _newTree2 = applyRouterStatePatchToTree( // TODO-APP: remove ''\n        [''].concat(_toConsumableArray(_flightSegmentPath5)), state.tree, _treePatch);\n\n        if (_newTree2 === null) {\n          throw new Error('SEGMENT MISMATCH');\n        }\n\n        var _canonicalUrlOverrideHref2 = overrideCanonicalUrl ? createHrefFromUrl(overrideCanonicalUrl) : undefined;\n\n        if (_canonicalUrlOverrideHref2) {\n          _mutable.canonicalUrlOverride = _canonicalUrlOverrideHref2;\n        }\n\n        _mutable.patchedTree = _newTree2;\n        _mutable.mpaNavigation = isNavigatingToNewRootLayout(state.tree, _newTree2); // Root refresh\n\n        if (_flightDataPath3.length === 3) {\n          _cache.subTreeData = _subTreeData;\n          fillLazyItemsTillLeafWithHead(_cache, state.cache, _treePatch, _head);\n        } else {\n          // Copy subTreeData for the root node of the cache.\n          _cache.subTreeData = state.cache.subTreeData;\n          fillCacheWithNewSubTreeData(_cache, state.cache, _flightDataPath3);\n        }\n\n        return {\n          // Keep href as it was set during navigate / restore\n          canonicalUrl: _canonicalUrlOverrideHref2 ? _canonicalUrlOverrideHref2 : state.canonicalUrl,\n          // Keep pushRef as server-patch only causes cache/tree update.\n          pushRef: state.pushRef,\n          // Keep focusAndScrollRef as server-patch only causes cache/tree update.\n          focusAndScrollRef: state.focusAndScrollRef,\n          // Apply patched router state\n          tree: _newTree2,\n          prefetchCache: state.prefetchCache,\n          // Apply patched cache\n          cache: _cache\n        };\n      }\n\n    case ACTION_RESTORE:\n      {\n        var _url = action.url,\n            tree = action.tree;\n\n        var _href2 = createHrefFromUrl(_url);\n\n        return {\n          // Set canonical url\n          canonicalUrl: _href2,\n          pushRef: state.pushRef,\n          focusAndScrollRef: state.focusAndScrollRef,\n          cache: state.cache,\n          prefetchCache: state.prefetchCache,\n          // Restore provided tree\n          tree: tree\n        };\n      }\n    // TODO-APP: Add test for not scrolling to nearest layout when calling refresh.\n    // TODO-APP: Add test for startTransition(() => {router.push('/'); router.refresh();}), that case should scroll.\n\n    case ACTION_REFRESH:\n      {\n        var _cache2 = action.cache,\n            _mutable2 = action.mutable;\n        var _href3 = state.canonicalUrl;\n\n        var _isForCurrentTree = JSON.stringify(_mutable2.previousTree) === JSON.stringify(state.tree);\n\n        if (_mutable2.mpaNavigation && _isForCurrentTree) {\n          return {\n            // Set href.\n            canonicalUrl: _mutable2.canonicalUrlOverride ? _mutable2.canonicalUrlOverride : state.canonicalUrl,\n            // TODO-APP: verify mpaNavigation not being set is correct here.\n            pushRef: {\n              pendingPush: true,\n              mpaNavigation: _mutable2.mpaNavigation\n            },\n            // All navigation requires scroll and focus management to trigger.\n            focusAndScrollRef: {\n              apply: false\n            },\n            // Apply cache.\n            cache: state.cache,\n            prefetchCache: state.prefetchCache,\n            // Apply patched router state.\n            tree: state.tree\n          };\n        } // Handle concurrent rendering / strict mode case where the cache and tree were already populated.\n\n\n        if (_mutable2.patchedTree && _isForCurrentTree) {\n          return {\n            // Set href.\n            canonicalUrl: _mutable2.canonicalUrlOverride ? _mutable2.canonicalUrlOverride : _href3,\n            // set pendingPush (always false in this case).\n            pushRef: state.pushRef,\n            // Apply focus and scroll.\n            // TODO-APP: might need to disable this for Fast Refresh.\n            focusAndScrollRef: {\n              apply: false\n            },\n            cache: _cache2,\n            prefetchCache: state.prefetchCache,\n            tree: _mutable2.patchedTree\n          };\n        }\n\n        if (!_cache2.data) {\n          // Fetch data from the root of the tree.\n          _cache2.data = createRecordFromThenable((0, _appRouter).fetchServerResponse(new URL(_href3, location.origin), [state.tree[0], state.tree[1], state.tree[2], 'refetch']));\n        }\n\n        var _readRecordValue3 = readRecordValue(_cache2.data),\n            _readRecordValue4 = _slicedToArray(_readRecordValue3, 2),\n            _flightData2 = _readRecordValue4[0],\n            _canonicalUrlOverride2 = _readRecordValue4[1]; // Handle case when navigating to page in `pages` from `app`\n\n\n        if (typeof _flightData2 === 'string') {\n          return {\n            canonicalUrl: _flightData2,\n            pushRef: {\n              pendingPush: true,\n              mpaNavigation: true\n            },\n            focusAndScrollRef: {\n              apply: false\n            },\n            cache: state.cache,\n            prefetchCache: state.prefetchCache,\n            tree: state.tree\n          };\n        } // Remove cache.data as it has been resolved at this point.\n\n\n        _cache2.data = null; // TODO-APP: Currently the Flight data can only have one item but in the future it can have multiple paths.\n\n        var _flightDataPath4 = _flightData2[0]; // FlightDataPath with more than two items means unexpected Flight data was returned\n\n        if (_flightDataPath4.length !== 3) {\n          // TODO-APP: handle this case better\n          console.log('REFRESH FAILED');\n          return state;\n        } // Given the path can only have two items the items are only the router state and subTreeData for the root.\n\n\n        var _flightDataPath5 = _slicedToArray(_flightDataPath4, 3),\n            _treePatch2 = _flightDataPath5[0],\n            _subTreeData2 = _flightDataPath5[1],\n            _head2 = _flightDataPath5[2];\n\n        var _newTree3 = applyRouterStatePatchToTree( // TODO-APP: remove ''\n        [''], state.tree, _treePatch2);\n\n        if (_newTree3 === null) {\n          throw new Error('SEGMENT MISMATCH');\n        }\n\n        var _canonicalUrlOverrideHref3 = _canonicalUrlOverride2 ? createHrefFromUrl(_canonicalUrlOverride2) : undefined;\n\n        if (_canonicalUrlOverride2) {\n          _mutable2.canonicalUrlOverride = _canonicalUrlOverrideHref3;\n        }\n\n        _mutable2.previousTree = state.tree;\n        _mutable2.patchedTree = _newTree3;\n        _mutable2.mpaNavigation = isNavigatingToNewRootLayout(state.tree, _newTree3); // Set subTreeData for the root node of the cache.\n\n        _cache2.subTreeData = _subTreeData2;\n        fillLazyItemsTillLeafWithHead(_cache2, state.cache, _treePatch2, _head2);\n        return {\n          // Set href, this doesn't reuse the state.canonicalUrl as because of concurrent rendering the href might change between dispatching and applying.\n          canonicalUrl: _canonicalUrlOverrideHref3 ? _canonicalUrlOverrideHref3 : _href3,\n          // set pendingPush (always false in this case).\n          pushRef: state.pushRef,\n          // TODO-APP: might need to disable this for Fast Refresh.\n          focusAndScrollRef: {\n            apply: false\n          },\n          // Apply patched cache.\n          cache: _cache2,\n          prefetchCache: state.prefetchCache,\n          // Apply patched router state.\n          tree: _newTree3\n        };\n      }\n\n    case ACTION_PREFETCH:\n      {\n        var _url2 = action.url,\n            serverResponse = action.serverResponse;\n\n        var _serverResponse = _slicedToArray(serverResponse, 2),\n            _flightData3 = _serverResponse[0],\n            _canonicalUrlOverride3 = _serverResponse[1]; // TODO-APP: Implement prefetch for hard navigation\n\n\n        if (typeof _flightData3 === 'string') {\n          return state;\n        }\n\n        var _href4 = createHrefFromUrl(_url2); // TODO-APP: Currently the Flight data can only have one item but in the future it can have multiple paths.\n\n\n        var _flightDataPath6 = _flightData3[0]; // The one before last item is the router state tree patch\n\n        var _flightDataPath6$slic = _flightDataPath6.slice(-3),\n            _flightDataPath6$slic2 = _slicedToArray(_flightDataPath6$slic, 2),\n            _treePatch3 = _flightDataPath6$slic2[0],\n            _subTreeData3 = _flightDataPath6$slic2[1]; // TODO-APP: Verify if `null` can't be returned from user code.\n        // If subTreeData is null the prefetch did not provide a component tree.\n\n\n        if (_subTreeData3 !== null) {\n          fillCacheWithPrefetchedSubTreeData(state.cache, _flightDataPath6);\n        }\n\n        var _flightSegmentPath6 = _flightDataPath6.slice(0, -3);\n\n        var _newTree4 = applyRouterStatePatchToTree( // TODO-APP: remove ''\n        [''].concat(_toConsumableArray(_flightSegmentPath6)), state.tree, _treePatch3); // Patch did not apply correctly\n\n\n        if (_newTree4 === null) {\n          return state;\n        } // Create new tree based on the flightSegmentPath and router state patch\n\n\n        state.prefetchCache.set(_href4, {\n          // Path without the last segment, router state, and the subTreeData\n          flightSegmentPath: _flightSegmentPath6,\n          // Create new tree based on the flightSegmentPath and router state patch\n          tree: _newTree4,\n          canonicalUrlOverride: _canonicalUrlOverride3\n        });\n        return state;\n      }\n    // This case should never be hit as dispatch is strongly typed.\n\n    default:\n      throw new Error('Unknown action');\n  }\n}\n\nfunction serverReducer(state, _action) {\n  return state;\n}\n\nvar reducer =  false ? 0 : clientReducer;\nexports.reducer = reducer;\n\nif ((typeof exports[\"default\"] === 'function' || typeof exports[\"default\"] === 'object' && exports[\"default\"] !== null) && typeof exports[\"default\"].__esModule === 'undefined') {\n  Object.defineProperty(exports[\"default\"], '__esModule', {\n    value: true\n  });\n  Object.assign(exports[\"default\"], exports);\n  module.exports = exports[\"default\"];\n}\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/reducer.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/render-from-template-context.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/render-from-template-context.js ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\"use client\";\n\"use strict\";\n\nvar _s = $RefreshSig$();\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = RenderFromTemplateContext;\n\nvar _interop_require_wildcard = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_wildcard.js */ \"./node_modules/@swc/helpers/lib/_interop_require_wildcard.js\")[\"default\"]);\n\nvar _react = _interop_require_wildcard(__webpack_require__(/*! react */ \"./node_modules/next/dist/compiled/react/index.js\"));\n\nvar _appRouterContext = __webpack_require__(/*! ../../shared/lib/app-router-context */ \"./node_modules/next/dist/shared/lib/app-router-context.js\");\n\nfunction RenderFromTemplateContext() {\n  _s();\n\n  var children = (0, _react).useContext(_appRouterContext.TemplateContext);\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, children);\n}\n\n_s(RenderFromTemplateContext, \"Fd1ieM0FAzMq7OA5+LlfYPV5S7Y=\");\n\n_c = RenderFromTemplateContext;\n\nif ((typeof exports[\"default\"] === 'function' || typeof exports[\"default\"] === 'object' && exports[\"default\"] !== null) && typeof exports[\"default\"].__esModule === 'undefined') {\n  Object.defineProperty(exports[\"default\"], '__esModule', {\n    value: true\n  });\n  Object.assign(exports[\"default\"], exports);\n  module.exports = exports[\"default\"];\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderFromTemplateContext\");\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3JlbmRlci1mcm9tLXRlbXBsYXRlLWNvbnRleHQuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7OztBQUNBQSw4Q0FBNkM7RUFDekNHLEtBQUssRUFBRTtBQURrQyxDQUE3QztBQUdBRCxrQkFBQSxHQUFrQkUseUJBQWxCOztBQUNBLElBQUlDLHlCQUF5QixHQUFHQyxxSkFBaEM7O0FBQ0EsSUFBSUMsTUFBTSxHQUFHRix5QkFBeUIsQ0FBQ0MsbUJBQU8sQ0FBQywrREFBRCxDQUFSLENBQXRDOztBQUNBLElBQUlFLGlCQUFpQixHQUFHRixtQkFBTyxDQUFDLHNHQUFELENBQS9COztBQUNBLFNBQVNGLHlCQUFULEdBQXFDO0VBQUE7O0VBQ2pDLElBQU1LLFFBQVEsR0FBRyxDQUFDLEdBQUdGLE1BQUosRUFBWUcsVUFBWixDQUF1QkYsaUJBQWlCLENBQUNHLGVBQXpDLENBQWpCO0VBQ0EsT0FBTyxhQUFjSixNQUFNLFdBQU4sQ0FBZUssYUFBZixDQUE2QkwsTUFBTSxXQUFOLENBQWVNLFFBQTVDLEVBQXNELElBQXRELEVBQTRESixRQUE1RCxDQUFyQjtBQUNIOztHQUhRTCx5Qjs7S0FBQUEseUI7O0FBTVQsSUFBSSxDQUFDLE9BQU9GLE9BQU8sV0FBZCxLQUEyQixVQUEzQixJQUEwQyxPQUFPQSxPQUFPLFdBQWQsS0FBMkIsUUFBM0IsSUFBdUNBLE9BQU8sV0FBUCxLQUFvQixJQUF0RyxLQUFnSCxPQUFPQSxPQUFPLFdBQVAsQ0FBZ0JZLFVBQXZCLEtBQXNDLFdBQTFKLEVBQXVLO0VBQ3JLZCxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQU8sV0FBN0IsRUFBdUMsWUFBdkMsRUFBcUQ7SUFBRUMsS0FBSyxFQUFFO0VBQVQsQ0FBckQ7RUFDQUgsTUFBTSxDQUFDZSxNQUFQLENBQWNiLE9BQU8sV0FBckIsRUFBK0JBLE9BQS9CO0VBQ0FjLE1BQU0sQ0FBQ2QsT0FBUCxHQUFpQkEsT0FBTyxXQUF4QjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvcmVuZGVyLWZyb20tdGVtcGxhdGUtY29udGV4dC5qcz84ZWU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBSZW5kZXJGcm9tVGVtcGxhdGVDb250ZXh0O1xudmFyIF9pbnRlcm9wX3JlcXVpcmVfd2lsZGNhcmQgPSByZXF1aXJlKFwiQHN3Yy9oZWxwZXJzL2xpYi9faW50ZXJvcF9yZXF1aXJlX3dpbGRjYXJkLmpzXCIpLmRlZmF1bHQ7XG52YXIgX3JlYWN0ID0gX2ludGVyb3BfcmVxdWlyZV93aWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9hcHBSb3V0ZXJDb250ZXh0ID0gcmVxdWlyZShcIi4uLy4uL3NoYXJlZC9saWIvYXBwLXJvdXRlci1jb250ZXh0XCIpO1xuZnVuY3Rpb24gUmVuZGVyRnJvbVRlbXBsYXRlQ29udGV4dCgpIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9ICgwLCBfcmVhY3QpLnVzZUNvbnRleHQoX2FwcFJvdXRlckNvbnRleHQuVGVtcGxhdGVDb250ZXh0KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbik7XG59XG5cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVuZGVyLWZyb20tdGVtcGxhdGUtY29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJSZW5kZXJGcm9tVGVtcGxhdGVDb250ZXh0IiwiX2ludGVyb3BfcmVxdWlyZV93aWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfYXBwUm91dGVyQ29udGV4dCIsImNoaWxkcmVuIiwidXNlQ29udGV4dCIsIlRlbXBsYXRlQ29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJGcmFnbWVudCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/render-from-template-context.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/use-reducer-with-devtools.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/use-reducer-with-devtools.js ***!
  \*******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar _slicedToArray = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray.js\");\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.useReducerWithReduxDevtools = void 0;\n\nvar _react = __webpack_require__(/*! react */ \"./node_modules/next/dist/compiled/react/index.js\");\n\nfunction normalizeRouterState(val) {\n  if (val instanceof Map) {\n    var obj = {};\n\n    var _iterator = _createForOfIteratorHelper(val.entries()),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            key = _step$value[0],\n            value = _step$value[1];\n\n        if (typeof value === 'function') {\n          obj[key] = 'fn()';\n          continue;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          if (value.$$typeof) {\n            obj[key] = value.$$typeof.toString();\n            continue;\n          }\n\n          if (value._bundlerConfig) {\n            obj[key] = 'FlightData';\n            continue;\n          }\n        }\n\n        obj[key] = normalizeRouterState(value);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return obj;\n  }\n\n  if (typeof val === 'object' && val !== null) {\n    var _obj = {};\n\n    for (var _key in val) {\n      var _value = val[_key];\n\n      if (typeof _value === 'function') {\n        _obj[_key] = 'fn()';\n        continue;\n      }\n\n      if (typeof _value === 'object' && _value !== null) {\n        if (_value.$$typeof) {\n          _obj[_key] = _value.$$typeof.toString();\n          continue;\n        }\n\n        if (_value.hasOwnProperty('_bundlerConfig')) {\n          _obj[_key] = 'FlightData';\n          continue;\n        }\n      }\n\n      _obj[_key] = normalizeRouterState(_value);\n    }\n\n    return _obj;\n  }\n\n  if (Array.isArray(val)) {\n    return val.map(normalizeRouterState);\n  }\n\n  return val;\n}\n\nfunction devToolReducer(fn, ref) {\n  return function (state, action) {\n    var res = fn(state, action);\n\n    if (ref.current) {\n      ref.current.send(action, normalizeRouterState(res));\n    }\n\n    return res;\n  };\n}\n\nfunction useReducerWithReduxDevtoolsNoop(fn, initialState) {\n  _s();\n\n  var _useReducer = (0, _react).useReducer(fn, initialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  return [state, dispatch, function () {}];\n}\n\n_s(useReducerWithReduxDevtoolsNoop, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\nfunction useReducerWithReduxDevtoolsImpl(fn, initialState) {\n  _s2();\n\n  var devtoolsConnectionRef = (0, _react).useRef();\n  var enabledRef = (0, _react).useRef();\n  (0, _react).useEffect(function () {\n    if (devtoolsConnectionRef.current || enabledRef.current === false) {\n      return;\n    }\n\n    if (enabledRef.current === undefined && typeof window.__REDUX_DEVTOOLS_EXTENSION__ === 'undefined') {\n      enabledRef.current = false;\n      return;\n    }\n\n    devtoolsConnectionRef.current = window.__REDUX_DEVTOOLS_EXTENSION__.connect({\n      instanceId: 1,\n      name: 'next-router'\n    });\n\n    if (devtoolsConnectionRef.current) {\n      devtoolsConnectionRef.current.init(normalizeRouterState(initialState));\n    }\n\n    return function () {\n      devtoolsConnectionRef.current = undefined;\n    };\n  }, [initialState]);\n\n  var _useReducer3 = (0, _react).useReducer(devToolReducer(\n  /* logReducer( */\n  fn\n  /*)*/\n  , devtoolsConnectionRef), initialState),\n      _useReducer4 = _slicedToArray(_useReducer3, 2),\n      state = _useReducer4[0],\n      dispatch = _useReducer4[1];\n\n  var sync = (0, _react).useCallback(function () {\n    if (devtoolsConnectionRef.current) {\n      devtoolsConnectionRef.current.send({\n        type: 'RENDER_SYNC'\n      }, normalizeRouterState(state));\n    }\n  }, [state]);\n  return [state, dispatch, sync];\n}\n\n_s2(useReducerWithReduxDevtoolsImpl, \"pLR6zS9fUqATAvEc1j249W8BDm8=\");\n\nvar useReducerWithReduxDevtools =  true ? useReducerWithReduxDevtoolsImpl : 0;\nexports.useReducerWithReduxDevtools = useReducerWithReduxDevtools;\n\nif ((typeof exports[\"default\"] === 'function' || typeof exports[\"default\"] === 'object' && exports[\"default\"] !== null) && typeof exports[\"default\"].__esModule === 'undefined') {\n  Object.defineProperty(exports[\"default\"], '__esModule', {\n    value: true\n  });\n  Object.assign(exports[\"default\"], exports);\n  module.exports = exports[\"default\"];\n}\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/use-reducer-with-devtools.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5CHP%5CDesktop%5Cferdinand-frontend%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Ccomponents%5Capp-router.js&modules=C%3A%5CUsers%5CHP%5CDesktop%5Cferdinand-frontend%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Ccomponents%5Clayout-router.js&modules=C%3A%5CUsers%5CHP%5CDesktop%5Cferdinand-frontend%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Ccomponents%5Crender-from-template-context.js&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);